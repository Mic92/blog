<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us"><generator uri="https://gohugo.io/" version="0.110.0">Hugo</generator><title type="html">~/git/blog</title><subtitle type="html">My brain-dump of random code/configuration.</subtitle><link href="https://blog.thalheim.io/" rel="alternate" type="text/html" title="HTML"/><link href="https://blog.thalheim.io/index.xml" rel="alternate" type="application/rss+xml" title="RSS"/><link href="https://blog.thalheim.io/atom.xml" rel="self" type="application/atom+xml" title="Atom"/><updated>2024-01-02T01:41:55+00:00</updated><rights>© 2021 Jörg Thalheim</rights><id>https://blog.thalheim.io/</id><entry><title type="html">How to execute NixOS tests interactively for debugging</title><link href="https://blog.thalheim.io/2023/01/08/how-to-execute-nixos-tests-interactively-for-debugging/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2023/01/08/how-to-execute-nixos-tests-interactively-for-debugging/</id><author><name>Jörg Thalheim and Alex A. Renoire</name></author><published>2023-01-08T11:46:06+01:00</published><updated>2023-01-08T11:46:06+01:00</updated><content type="html"><![CDATA[<p>For complex modules, you may sometimes struggle to understand why a test isn&rsquo;t
behaving properly. To gain more insight, you may want to check the debug output.
This leads me to discuss how to execute NixOS tests interactively.</p>
<h1 id="problem-statement">Problem statement</h1>
<p>In a <a href="https://blog.thalheim.io/2023/01/08/how-to-use-nixos-testing-framework-with-flakes/">standard way of running tests</a>, you can&rsquo;t interfere with
the process to explore what&rsquo;s gone wrong.</p>
<p>But there&rsquo;s a trick: you can start the test driver in a python REPL loop, which
will provide an interactive shell where you can execute your tests. This is a
great way to shorten the feedback loop, as we can execute commands on our VMs.
For instance, we can tell a VM to dump logs or to display the contents of files.</p>
<p>So, let&rsquo;s explore how to run tests interactively.</p>
<h1 id="running-tests-interactively">Running tests interactively</h1>
<p>To start the hello-world-server test in the interactive mode, you first need to
build the test driver by adding the <code>.driver</code> attribute to the test name and
then start it manually by providing the <code>--interactive</code> flag. Here&rsquo;s how you do
it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span># Here we assume that our <span style="color:#8be9fd;font-style:italic">test</span> machine is running on <span style="color:#f1fa8c">`</span>x86_64-linux<span style="color:#f1fa8c">`</span>, adjust this to your own architecture<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ nix build .#checks.x86_64-linux.hello-world-server.driver
</span></span></code></pre></div><p>This will write out result symlink (all files are created in the nix store and
we don&rsquo;t want to copy them outside) pointing to the test driver. We can run the
test driver like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#44475a">./result/bin/nixos-test-driver --interactive
</span></span></span></code></pre></div><p><strong>Note:</strong> <em>Usually when running tests there&rsquo;s no Internet access because you
want things to be reproducible and self-contained. Running NixOS tests this way
will allow the VM to access the Internet, which will make some services work
that didn&rsquo;t work previously in the nix build sandbox. Therefore, some tests will
pass that were failing previously.</em></p>
<p>Inside the REPL, you can type out the Python commands to test your module. For
example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">&gt;&gt;&gt;</span> node1<span style="color:#ff79c6">.</span>wait_for_unit(<span style="color:#f1fa8c">&#34;hello-world-server&#34;</span>)
</span></span></code></pre></div><h2 id="direct-shell-access">Direct shell access</h2>
<p>The API of the test driver gives you direct shell access with
<code>&lt;yourmachine&gt;.shell_interact()</code>, so you can access the shell running inside the
guest machine.</p>
<p>To try it out, let&rsquo;s replace the placeholder with the name of the VM defined in
the test &mdash; node1:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#ff79c6">&gt;&gt;&gt;</span> node1<span style="color:#ff79c6">.</span>shell_interact()
</span></span><span style="display:flex;"><span>node1: Terminal <span style="color:#ff79c6">is</span> ready (there <span style="color:#ff79c6">is</span> no initial prompt):
</span></span><span style="display:flex;"><span>$ hostname
</span></span><span style="display:flex;"><span>node1
</span></span></code></pre></div><h2 id="breakpoints">Breakpoints</h2>
<p>For complex modules, you may need to execute certain tests and only then inspect
the virtual machine. In such case, you can use the <code>breakpoint()</code> function in
your test script and run the test-driver without the <code>--interactive</code> flag:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#6272a4"># shortened example ./tests/hello-world-server.nix from above</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#ff79c6">import</span> <span style="color:#f1fa8c">./lib.nix</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#6272a4"># ...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> testScript <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">   start_all()
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">   node1.wait_for_unit(&#34;hello-world-server&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">   output = node1.succeed(&#34;curl localhost:8000/index.html&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">   # The test will stop at this line, giving you control over execution.
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">   breakpoint()
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">   assert &#34;Hello world&#34; in output, f&#34;&#39;{output}&#39; does not contain &#39;Hello world&#39;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"> &#39;&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here, we stopped the test flow and are looking at the value of <code>output</code> and
checking the status of the module with <code>systemctl</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ nix build .#checks.x86_64-linux.hello-world-server.driver
</span></span><span style="display:flex;"><span>$ ./result/bin/nixos-test-driver
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; print<span style="color:#ff79c6">(</span>output<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>&gt;&gt;&gt; node1.execute<span style="color:#ff79c6">(</span><span style="color:#f1fa8c">&#34;systemctl status hello-world-server&#34;</span><span style="color:#ff79c6">)</span>
</span></span></code></pre></div><h1 id="conclusion">Conclusion</h1>
<p>In this article, we showed how you can interactively execute NixOS tests for
easier troubleshooting and debugging. In short, you can do so using either the
<code>--interactive</code> flag or breakpoints in your test script. In comparison to
running tests in a sandbox, you can get immediate feedback and code completion,
and look at the intermediate results.</p>
<p>By employing these techniques, you can improve the quality and reliability of
your NixOS modules and ensure that they are functioning correctly.</p>
]]></content><category scheme="https://blog.thalheim.io/categories/nixos" term="nixos" label="nixos"/></entry><entry><title type="html">How to use NixOS testing framework with flakes</title><link href="https://blog.thalheim.io/2023/01/08/how-to-use-nixos-testing-framework-with-flakes/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2023/01/08/how-to-use-nixos-testing-framework-with-flakes/</id><author><name>Jörg Thalheim and Alex A. Renoire</name></author><published>2023-01-08T11:46:06+01:00</published><updated>2023-01-08T11:46:06+01:00</updated><content type="html"><![CDATA[<p>In this article, I will explain how to perform full integration tests with
flakes outside nixpkgs.</p>
<p>With <a href="https://nixos.wiki/wiki/NixOS_Testing_library" target="_blank">NixOS testing framework</a>,
you can
<a href="https://nix.dev/tutorials/integration-testing-using-virtual-machines" target="_blank">create end-to-end integration tests</a>
easily. It all comes down to starting a virtual machine based on your custom
modules and testing its state with a Python script. This way, you can identify
in advance all the regressions and incompatible configurations arising from the
updates you introduced.</p>
<p>One of the framework&rsquo;s upsides is that it&rsquo;s extremely fast — maybe the fastest
of its kind: setting up VMs and running tests does not take much time thanks to
sharing files with the nix store on the host.</p>
<p>But previously, there was no stable API to import the testing framework into
projects, therefore it was hard to test anything that&rsquo;s outside NixOS. The
situation has changed thanks to Robert Hensing, who [created a new modular
interface] for testing.</p>
<p>But there&rsquo;s still a problem with documentation. Of course, you can refer to the
corresponding
<a href="https://github.com/NixOS/nixpkgs/blob/master/nixos/doc/manual/development/writing-nixos-tests.section.md" target="_blank">manual chapter</a>
to explore NixOS testing framework. But many topics aren&rsquo;t explained in detail,
so I decided to write a brief intro to testing NixOS modules with flakes.</p>
<h1 id="intro-to-testing-in-nixos">Intro to testing in NixOS</h1>
<p>Let me give you some info on how tests are executed, and how to incorporate them
into your project. If you&rsquo;re new to NixOS, this info may be helpful.</p>
<p>So, how are tests executed in NixOS? To verify that the flake can be evaluated
successfully, we run the
<a href="https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-flake-check.html" target="_blank">flake check</a>
command. Under the hood, nix will run the so-called test driver in its own build
sandbox. The test driver provides an API for the test script to setup virtual
machines. When the VMs are ready, a series of tests are executed to check if
NixOS modules are functioning as intended.</p>
<p>That&rsquo;s a very broad outlook on how tests work. But how do you write tests?
First, if you are testing a module outside NixOS, i.e. in your own project, you
have to import <code>nixpkgs</code>, the biggest repository of Nix packages where the
testing library is located.</p>
<p>There are several ways to import <code>nixpkgs</code> in your code. One way is via
<code>fetchTarball</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  nixpkgs <span style="color:#ff79c6">=</span> <span style="color:#8be9fd;font-style:italic">fetchTarball</span> <span style="color:#f1fa8c">&#34;https://github.com/NixOS/nixpkgs/archive/....tar.gz&#34;</span>;
</span></span><span style="display:flex;"><span>  pkgs <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">import</span> nixpkgs {};
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>But <code>fetchTarball</code> is a builtin, which means that <code>nixpkgs</code> will be downloaded
during evaluation. Another way is to load <code>nixpkgs</code> using a
<a href="https://nixos.wiki/wiki/Flakes" target="_blank">flake</a>. It&rsquo;s more convenient, because this way
you can update the dependencies easily. I&rsquo;ll use this approach in my example.</p>
<p>Let&rsquo;s move to the coding part now.</p>
<h1 id="defining-a-flake-to-be-tested">Defining a flake to be tested</h1>
<p>As an example, I’ll take a simple project that runs a web server returning a
“Hello world!” string. First, let’s specify the flake:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#6272a4"># flake.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  inputs<span style="color:#ff79c6">.</span>nixpkgs<span style="color:#ff79c6">.</span>url <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;github:nixos/nixpkgs/nixpkgs-unstable&#34;</span>;
</span></span><span style="display:flex;"><span>  outputs <span style="color:#ff79c6">=</span> { self<span style="color:#ff79c6">,</span> nixpkgs<span style="color:#ff79c6">,</span> <span style="color:#ff79c6">...</span>}: {
</span></span><span style="display:flex;"><span>    nixosModules<span style="color:#ff79c6">.</span>hello-world-server <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">import</span> <span style="color:#f1fa8c">./hello-world-server.nix</span> {};
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This flake exposes the module <code>./hello-world-server.nix</code>. You can find the file
in the repository <a href="https://github.com/Mic92/nixos-test-example" target="_blank">here</a>. What it
does is it creates a simple HTML page and starts a server on the port 8000. The
correct behavior would be if the module returns a “Hello world!” string. Any
other output will be incorrect.</p>
<h1 id="writing-the-tests">Writing the tests</h1>
<p>Now that we have our flake and module, we can write a test to check if we can
reach the server.</p>
<p>But before that, we will create a helper function in <code>./tests/lib.nix</code>, which
will import the testing framework from nixpkgs. Extending <code>specialArgs</code> will
allow us to pass through any flake inputs and outputs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#6272a4"># tests/lib.nix</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># The first argument to this function is the test module itself</span>
</span></span><span style="display:flex;"><span>test:
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># These arguments are provided by `flake.nix` on import, see checkArgs</span>
</span></span><span style="display:flex;"><span>{ pkgs<span style="color:#ff79c6">,</span> self}:
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">let</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">inherit</span> (pkgs) lib;
</span></span><span style="display:flex;"><span>  <span style="color:#6272a4"># this imports the nixos library that contains our testing framework</span>
</span></span><span style="display:flex;"><span>  nixos-lib <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">import</span> (pkgs<span style="color:#ff79c6">.</span>path <span style="color:#ff79c6">+</span> <span style="color:#f1fa8c">&#34;/nixos/lib&#34;</span>) {};
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">in</span>
</span></span><span style="display:flex;"><span>(nixos-lib<span style="color:#ff79c6">.</span>runTest {
</span></span><span style="display:flex;"><span>  hostPkgs <span style="color:#ff79c6">=</span> pkgs;
</span></span><span style="display:flex;"><span>  <span style="color:#6272a4"># This speeds up the evaluation by skipping evaluating documentation (optional)</span>
</span></span><span style="display:flex;"><span>  defaults<span style="color:#ff79c6">.</span>documentation<span style="color:#ff79c6">.</span>enable <span style="color:#ff79c6">=</span> lib<span style="color:#ff79c6">.</span>mkDefault false;
</span></span><span style="display:flex;"><span>  <span style="color:#6272a4"># This makes `self` available in the NixOS configuration of our virtual machines.</span>
</span></span><span style="display:flex;"><span>  <span style="color:#6272a4"># This is useful for referencing modules or packages from your own flake</span>
</span></span><span style="display:flex;"><span>  <span style="color:#6272a4"># as well as importing from other flakes.</span>
</span></span><span style="display:flex;"><span>  node<span style="color:#ff79c6">.</span>specialArgs <span style="color:#ff79c6">=</span> { <span style="color:#ff79c6">inherit</span> self; };
</span></span><span style="display:flex;"><span>  imports <span style="color:#ff79c6">=</span> [ test ];
</span></span><span style="display:flex;"><span>})<span style="color:#ff79c6">.</span>config<span style="color:#ff79c6">.</span>result
</span></span></code></pre></div><p>You can use this helper function across different NixOS tests in your project.</p>
<p>Now, let’s create the test:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#6272a4"># ./tests/hello-world-server.nix</span>
</span></span><span style="display:flex;"><span>(<span style="color:#ff79c6">import</span> <span style="color:#f1fa8c">./lib.nix</span>) {
</span></span><span style="display:flex;"><span>  name <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;from-nixos&#34;</span>;
</span></span><span style="display:flex;"><span>  nodes <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># `self` here is set by using specialArgs in `lib.nix`</span>
</span></span><span style="display:flex;"><span>    node1 <span style="color:#ff79c6">=</span> { self<span style="color:#ff79c6">,</span> pkgs<span style="color:#ff79c6">,</span> <span style="color:#ff79c6">...</span> }: {
</span></span><span style="display:flex;"><span>      imports <span style="color:#ff79c6">=</span> [ self<span style="color:#ff79c6">.</span>nixosModules<span style="color:#ff79c6">.</span>hello-world-server ];
</span></span><span style="display:flex;"><span>      environment<span style="color:#ff79c6">.</span>systemPackages <span style="color:#ff79c6">=</span> [ pkgs<span style="color:#ff79c6">.</span>curl ];
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>  <span style="color:#6272a4"># This is the test code that will check if our service is running correctly:</span>
</span></span><span style="display:flex;"><span>  testScript <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">    start_all()
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">    # wait for our service to start
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">    node1.wait_for_unit(&#34;hello-world-server&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">    output = node1.succeed(&#34;curl localhost:8000/index.html&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">    # Check if our webserver returns the expected result
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">    assert &#34;Hello world&#34; in output, f&#34;&#39;{output}&#39; does not contain &#39;Hello world&#39;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">  &#39;&#39;</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>To expose the test in our flake, we will import it in the checks output in the
<code>flake.nix</code> file. This will make the test run when you execute the
<code>nix flake check -L</code> command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#6272a4"># flake.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  inputs<span style="color:#ff79c6">.</span>nixpkgs<span style="color:#ff79c6">.</span>url <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;github:nixos/nixpkgs/nixpkgs-unstable&#34;</span>;
</span></span><span style="display:flex;"><span>  outputs <span style="color:#ff79c6">=</span> { self<span style="color:#ff79c6">,</span> nixpkgs<span style="color:#ff79c6">,</span> <span style="color:#ff79c6">...</span>}: <span style="color:#ff79c6">let</span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># expose systems for `x86_64-linux` and `aarch64-linux`</span>
</span></span><span style="display:flex;"><span>    forAllSystems <span style="color:#ff79c6">=</span> nixpkgs<span style="color:#ff79c6">.</span>lib<span style="color:#ff79c6">.</span>genAttrs [ <span style="color:#f1fa8c">&#34;x86_64-linux&#34;</span> <span style="color:#f1fa8c">&#34;aarch64-linux&#34;</span> ];
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">in</span> {
</span></span><span style="display:flex;"><span>    nixosModules<span style="color:#ff79c6">.</span>hello-world-server <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">import</span> <span style="color:#f1fa8c">./hello-world-server.nix</span>;
</span></span><span style="display:flex;"><span>    checks <span style="color:#ff79c6">=</span> forAllSystems (system: <span style="color:#ff79c6">let</span>
</span></span><span style="display:flex;"><span>      checkArgs <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># reference to nixpkgs for the current system</span>
</span></span><span style="display:flex;"><span>        pkgs <span style="color:#ff79c6">=</span> nixpkgs<span style="color:#ff79c6">.</span>legacyPackages<span style="color:#ff79c6">.</span><span style="color:#f1fa8c">${</span>system<span style="color:#f1fa8c">}</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># this gives us a reference to our flake but also all flake inputs</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">inherit</span> self;
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">in</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#6272a4"># import our test</span>
</span></span><span style="display:flex;"><span>      hello-world-server <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">import</span> <span style="color:#f1fa8c">./tests/hello-world-server.nix</span> checkArgs;
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now that we have our nixos module, we can write a nixos test to check if we can
reach the &ldquo;hello world&rdquo; application. To expose the test in our flake, we will
add an attribute under the <code>checks</code> output in the <code>flake.nix</code> file. This will
make the test run when you execute the <code>nix flake check -L</code> command. The test
uses the hello-world-server nixos module and checks if the application can be
reached.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span><span style="color:#6272a4"># flake.nix</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  inputs<span style="color:#ff79c6">.</span>nixpkgs<span style="color:#ff79c6">.</span>url <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;github:nixos/nixpkgs/nixpkgs-unstable&#34;</span>;
</span></span><span style="display:flex;"><span>  outputs <span style="color:#ff79c6">=</span> { self<span style="color:#ff79c6">,</span> nixpkgs<span style="color:#ff79c6">,</span> <span style="color:#ff79c6">...</span>}: <span style="color:#ff79c6">let</span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># expose systems for `x86_64-linux` and `aarch64-linux`</span>
</span></span><span style="display:flex;"><span>    forAllSystems <span style="color:#ff79c6">=</span> nixpkgs<span style="color:#ff79c6">.</span>lib<span style="color:#ff79c6">.</span>genAttrs [ <span style="color:#f1fa8c">&#34;x86_64-linux&#34;</span> <span style="color:#f1fa8c">&#34;aarch64-linux&#34;</span> ];
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">in</span> {
</span></span><span style="display:flex;"><span>    nixosModules<span style="color:#ff79c6">.</span>hello-world-server <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">import</span> <span style="color:#f1fa8c">./hello-world-server.nix</span>;
</span></span><span style="display:flex;"><span>    checks <span style="color:#ff79c6">=</span> forAllSystems (system: <span style="color:#ff79c6">let</span>
</span></span><span style="display:flex;"><span>      checkArgs <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># reference to nixpkgs for the current system</span>
</span></span><span style="display:flex;"><span>        pkgs <span style="color:#ff79c6">=</span> nixpkgs<span style="color:#ff79c6">.</span>legacyPackages<span style="color:#ff79c6">.</span><span style="color:#f1fa8c">${</span>system<span style="color:#f1fa8c">}</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># this gives us a reference to our flake but also all flake inputs</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">inherit</span> self;
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">in</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#6272a4"># import our test</span>
</span></span><span style="display:flex;"><span>      hello-world-server <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">import</span> <span style="color:#f1fa8c">./tests/hello-world-server.nix</span> checkArgs;
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h1 id="running-the-tests">Running the tests</h1>
<p>To verify that everything works as expected, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ nix flake check -L
</span></span></code></pre></div><p>The -L parameter here tells the testing framework to print all logs that occur
during the test, making it easier to follow.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#44475a">start all VLans
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">...
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">start all VMs
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">...
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">node1: waiting for unit hello-world-server
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">node1: waiting for the VM to finish booting
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">...
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">(finished: waiting for unit hello-world-server, in 7.02 seconds)
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">node1: must succeed: curl localhost:8000/index.html
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">node1 #   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">node1 #                                  Dload  Upload   Total   Spent    Left  Speed
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">node1 #   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0[    6.668081] hello-world-server[824]: 127.0.0.1 - - [08/Jan/2023 19:59:47] &#34;GET /index.html HTTP/1
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">.1&#34; 200 -
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">node1 # 100    87  100    87    0     0   4034      0 --:--:-- --:--:-- --:--:--  4350
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">(finished: must succeed: curl localhost:8000/index.html, in 0.07 seconds)
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">(finished: run the VM test script, in 7.15 seconds)
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">test script finished in 7.18s
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">...
</span></span></span></code></pre></div><p>Here, the testing framework creates a virtual network and a virtual machine with
our module in it, then it waits for the hello-world-server to start and checks
if its output is valid. Here, the output is “Hello world!”, so we passed the
test.</p>
<p>Now our hello-world-server NixOS module has a proper test!</p>
<h1 id="conclusion">Conclusion</h1>
<p>In this article, we explained how you can leverage the NixOS testing framework
for your projects while importing the nixpkgs repository. In particular, we
defined a NixOS test in a flake and exposed it through the checks output, making
it run when executing the <code>nix flake check -L</code> command.</p>
<p>But often you need to run your tests interactively to check the debug output and
gain more insight into why a test isn’t behaving the way you expected. That’s
what I explore in a <a href="https://blog.thalheim.io/2023/01/08/how-to-execute-nixos-tests-interactively-for-debugging/">twin article</a>.</p>
]]></content><category scheme="https://blog.thalheim.io/categories/nixos" term="nixos" label="nixos"/></entry><entry><title type="html">Nix-ld: A clean solution for issues with pre-compiled executables on NixOS</title><link href="https://blog.thalheim.io/2022/12/31/nix-ld-a-clean-solution-for-issues-with-pre-compiled-executables-on-nixos/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2022/12/31/nix-ld-a-clean-solution-for-issues-with-pre-compiled-executables-on-nixos/</id><author><name>Jörg Thalheim and Jill Thornhill</name></author><published>2022-12-31T07:37:57+01:00</published><updated>2022-12-31T07:37:57+01:00</updated><content type="html"><![CDATA[<p><em>No such file or directory: How I stopped worrying and started loving binaries
on NixOS.</em></p>
<p>In this article, I will discuss the technical issue of running pre-compiled
executables on NixOS, and how we can improve the user experience by making these
binaries work seamlessly using <a href="https://github.com/Mic92/nix-ld" target="_blank">nix-ld</a>.</p>
<p>One of the key benefits of <a href="https://nixos.org/" target="_blank">NixOS</a> is its focus on purity
and reproducibility. The operating system is designed to ensure that the system
configuration and installed software are always in a known and predictable
state. This is achieved through the use of the Nix package manager, which allows
users to declaratively specify their system configuration and software
dependencies.</p>
<p>However, this focus on purity can make it difficult for users to run
pre-compiled executables that were not specifically designed for NixOS. These
executables may have dependencies on libraries that are not available in the Nix
package manager, or may require patching or modification to work correctly on
the operating system.</p>
<h2 id="the-problem">The problem</h2>
<p>If you have used NixOS for a while, you may have encountered an issue when
attempting to run a pre-compiled executable. You probably saw something like
this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ ./masterpdfeditor5
</span></span><span style="display:flex;"><span>bash: ./masterpdfeditor5: No such file or directory
</span></span></code></pre></div><p>However, the file clearly exists:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ ls -la ./masterpdfeditor5
</span></span><span style="display:flex;"><span>-rwxr-xr-x 1 joerg users 27160344 Jul  4 16:22 ./masterpdfeditor5
</span></span></code></pre></div><p>To understand what is going on, we need to look at what happens when an
executable is run on a Linux operating system. When the shell attempts to run a
program, it uses an
<a href="https://man7.org/linux/man-pages/man2/execve.2.html" target="_blank">execve</a> system call to
request the operating system to run the program. We can use the tool
<a href="https://strace.io/" target="_blank">strace</a> to visualize this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ strace -f ./masterpdfeditor5
</span></span><span style="display:flex;"><span>execve(&#34;./masterpdfeditor5&#34;, [&#34;./masterpdfeditor5&#34;], 0x7fff70350ef8 /* 188 vars */) = -1 ENOENT (No such file or directory)
</span></span><span style="display:flex;"><span>strace: exec: No such file or directory
</span></span><span style="display:flex;"><span>+++ exited with 1 +++
</span></span></code></pre></div><p><code>Strace</code> prints out the system call and its arguments, as well as the return
code from the operating system. In this case, we can see that bash derived its
error message (<code>No such file or directory</code>) from the <code>execve</code> system call.</p>
<p>To understand why the operating system is reporting this error, we need to
analyze the executable file further. The
<a href="https://man7.org/linux/man-pages/man1/file.1.html" target="_blank">file</a> command from the
binutils package provides more information about the executable file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ file ./masterpdfeditor5
</span></span><span style="display:flex;"><span>masterpdfeditor5: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=406f865023e33cc6a0f9d179cc14a939c4b29fbe, stripped
</span></span></code></pre></div><p>We can see that the executable is a dynamically linked ELF binary that depends
on libraries found on the system to function. It uses a link-loader program,
also known as an <code>interpreter</code> to locate and load these libraries.</p>
<p>Commonly these programs are provided in your system libc, which in most cases is
<a href="https://www.gnu.org/software/libc/" target="_blank">glibc</a>, and are in a fixed location
(<code>/lib64/ld-linux-x86-64.so.2</code> if your CPU is x86-based).</p>
<p>On NixOS, the issue with running pre-compiled executables arises because it
allows users to mix different libraries, including the glibc package. Unlike
Linux, it does not provide a fixed path such as <code>/lib64/ld-linux-x86-64.so.2</code>
for the link-loader program. Executables packaged with Nix are linked against a
specific version of glibc. The <a href="https://github.com/Mic92/patchelf" target="_blank">patchelf</a>
command can be used to find out exactly which version is being used.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ patchelf --print-interpreter /run/current-system/sw/bin/ls
</span></span><span style="display:flex;"><span>/nix/store/ayfr5l52xkqqjn3n4h9jfacgnchz1z7s-glibc-2.35-224/lib/ld-linux-x86-64.so.2
</span></span></code></pre></div><p>When the operating system tries to run an executable, it parses the binary and
looks for the specified link-loader. If it cannot find it, it returns the
generic error code <code>ENOENT</code>, which results in an unhelpful error message.</p>
<h2 id="the-current-solution">The current solution</h2>
<p>To work around this issue when packaging programs that do not have the source
code available, such as <code>masterpdfeditor</code>, Nix uses a build function called
<code>autoPatchelfHook</code> to analyze the binary and resolve any missing dependencies.</p>
<p>This function rewrites the interpreter path <code>/lib64/ld-linux-x86-64.so.2</code> to a
specific version of the glibc package, and populates the RPATH field in the
executable with paths to all necessary libraries for the program to run. The
link-loader uses this field to locate the libraries at runtime.</p>
<p>We can use the <a href="https://github.com/NixOS/patchelf" target="_blank">patchelf</a> program to see the
effect of <code>autoPatchelfHook</code> on the <code>masterpdfeditor</code> program. By using
<code>nix-shell</code> to load a shell with masterpdfeditor and then printing the RPATH of
the program, we can see the paths to the necessary libraries encoded in the
program.</p>
<p>First, we load up a shell with masterpdfeditor in it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ nix-shell -p masterpdfeditor
</span></span></code></pre></div><p>Next, we get the nix path to the program</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>[nix-shell]$ which masterpdfeditor5
</span></span><span style="display:flex;"><span>/nix/store/zmdjwbizg4a6cja4darcn2qy9imr336k-masterpdfeditor-5.8.70/bin/masterpdfeditor5
</span></span></code></pre></div><p>The next command prints the RPATH encoded in the program.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>[nix-shell]$ patchelf --print-rpath &#34;/nix/store/zmdjwbizg4a6cja4darcn2qy9imr336k-masterpdfeditor-5.8.70/bin/.masterpdfeditor5-wrapped&#34;
</span></span></code></pre></div><p>It gives this result:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>/nix/store/y4k2206qhks30wspxx1nkmgfqfdmxp0j-sane-backends-1.1.1/lib:/nix/store/zaflwh2nwzj1f0wngd7hqm3nvlf3yhsx-zlib-1.2.13/lib:/nix/store/dgxn688wq7whsvs2fycygq0wn888xnsv-qtsvg-5.15.7/lib:/nix/store/9lcgwnc70f4wj1czklczql7a
</span></span><span style="display:flex;"><span>wcv24mi-qtbase-5.15.7/lib:/nix/store/lgfp5762m5qzby9syd21kj04l5qmjg4h-qtdeclarative-5.15.7/lib:/nix/store/ykjcsxdh9c1w664g6v38d86gph8m6mq7-libglvnd-1.5.0/lib:/nix/store/wprxx5zkkk13hpj6k1v6qadjylh3vq9m-gcc-11.3.0-lib/lib
</span></span></code></pre></div><p>While <code>autoPatchelfHook</code> is a useful tool for making many programs usable in
Nix, there are a few cases where it may not be possible or practical to use it.
These include:</p>
<ul>
<li>Using binary executables downloaded with third-party package managers (e.g.
vscode, npm, or pip). With autoPatchelfHook, these would have to be patched on
every update</li>
<li>Executables hidden inside other programs or archives, for example Java JARs
might contain executables unpacked at runtime.</li>
<li>Running a game or proprietary software that verifies its integrity and will
not start if the binary has been modified.</li>
<li>Programs that are too large to be copied to the Nix store (e.g. FPGA IDEs).</li>
</ul>
<h2 id="nix-ld-to-the-rescue">Nix-ld to the rescue!</h2>
<p>To address these cases, <a href="https://github.com/Mic92/nix-ld" target="_blank">nix-ld</a> was created as
an alternative to <code>autoPatchelfHook</code>. It allows users to run pre-compiled
executables on NixOS without the need to modify the binaries or copy them to the
Nix store. This improves the user experience by allowing users to easily run
binaries downloaded from third-party sources and proprietary software without
patching or modification.</p>
<p>It is installed in the same location as the link-loader on other Linux
distributions (i.e. <code>/lib64/ld-linux-x86-64.so.2</code>), and it loads the actual
link-loader as specified in the <code>NIX_LD</code> environment variable. It also accepts a
comma-separated list of library lookup paths in <code>NIX_LD_LIBRARY_PATH</code> and
rewrites this variable to <code>LD_LIBRARY_PATH</code> before passing execution to the
link-loader. This allows users to specify additional libraries that the
executable needs to run.</p>
<p>On a system configured with <code>nix-ld</code>, the error message when attempting to run
an unpatched binary will be more informative and provide guidance on how to
address the issue:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ ./masterpdfeditor5
</span></span><span style="display:flex;"><span>cannot execute ./masterpdfeditor5: You are trying to run an unpatched binary on nixos, but you have not configured NIX_LD or NIX_LD_x86_64-linux. See https://github.com/Mic92/nix-ld for more details
</span></span></code></pre></div><p>To further improve the user experience, a new feature is available in the latest
unstable version of NixOS and the upcoming 23.05 release. It allows the most
common libraries to be included in the NixOs configuration as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{ config<span style="color:#ff79c6">,</span> pkgs<span style="color:#ff79c6">,</span> <span style="color:#ff79c6">...</span> }: {
</span></span><span style="display:flex;"><span>  <span style="color:#6272a4"># Enable nix ld</span>
</span></span><span style="display:flex;"><span>  programs<span style="color:#ff79c6">.</span>nix-ld<span style="color:#ff79c6">.</span>enable <span style="color:#ff79c6">=</span> true;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#6272a4"># Sets up all the libraries to load</span>
</span></span><span style="display:flex;"><span>  programs<span style="color:#ff79c6">.</span>nix-ld<span style="color:#ff79c6">.</span>libraries <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">with</span> pkgs; [
</span></span><span style="display:flex;"><span>    stdenv<span style="color:#ff79c6">.</span>cc<span style="color:#ff79c6">.</span>cc
</span></span><span style="display:flex;"><span>    zlib
</span></span><span style="display:flex;"><span>    fuse3
</span></span><span style="display:flex;"><span>    icu
</span></span><span style="display:flex;"><span>    zlib
</span></span><span style="display:flex;"><span>    nss
</span></span><span style="display:flex;"><span>    openssl
</span></span><span style="display:flex;"><span>    curl
</span></span><span style="display:flex;"><span>    expat
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># ...</span>
</span></span><span style="display:flex;"><span>  ];
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>For a more extensive version of this configuration, see my
<a href="https://github.com/Mic92/dotfiles/blob/master/nixos/modules/nix-ld.nix" target="_blank">dotfiles</a>.</p>
<p>By including the most common libraries in the configuration, nix-ld can provide
a more seamless experience for users running pre-compiled executables on NixOS.
They will not need to manually specify the necessary libraries for each
executable and can simply run them as they would on other Linux distributions.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In conclusion, nix-ld is a useful tool for running pre-compiled executables on
NixOS without the need for patching or modification. It provides a shim layer
that allows users to specify the necessary libraries for each executable and
improves the user experience by allowing users to easily run binaries from
third-party sources and proprietary software. By including the most common
libraries in the NixOS configuration, nix-ld can provide an even more seamless
experience for running pre-compiled executables on NixOS.</p>
<p>In my next article, I’ll be looking at a similar issue to the one encountered
when working with executable binaries. Scripts that are hardcoded to point to
/usr/bin can also cause a problem on NixOS, and I will address this by
introducing <a href="https://github.com/Mic92/envfs" target="_blank">envfs</a></p>
]]></content><category scheme="https://blog.thalheim.io/categories/nixos" term="nixos" label="nixos"/><category scheme="https://blog.thalheim.io/categories/kernel" term="kernel" label="kernel"/></entry><entry><title type="html">Hacking on Kernel Modules in NixOS</title><link href="https://blog.thalheim.io/2022/12/17/hacking-on-kernel-modules-in-nixos/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2022/12/17/hacking-on-kernel-modules-in-nixos/</id><author><name>Jörg Thalheim and Alex A. Renoire</name></author><published>2022-12-17T20:50:21+01:00</published><updated>2022-12-17T20:50:21+01:00</updated><content type="html"><![CDATA[<p>Lately, I hacked on some kernel modules to get more debug logs out of a kernel
module on my NixOS machine. Because NixOS does not follow the Filesystem
Hierarchy Standard (FHS) for filesystem layouts, the standard kernel hacker
tutorials won&rsquo;t fully apply to NixOS. However, by leveraging the NixOS
configuration, we can quickly set up an environment that allows us to compile
the Linux kernel and its modules.</p>
<h1 id="where-can-you-define-the-kernel">Where can you define the kernel?</h1>
<p>Commonly, Linux distributions put their kernel sources in <code>/usr/src</code> and their
kernel modules in <code>/lib/modules/$(uname -r)</code>. Like always, NixOS is a special
snowflake, but once you get to learn the mechanics, it is actually quite
pleasant to use.</p>
<p>In the NixOS configuration, the kernel is defined via the <code>boot.kernelPackages</code>
option. The former also defines all out-of-tree kernel modules and other
packages that have the kernel as a build dependency. So, to access the kernel
only, you should look into <code>boot.kernelPackages.kernel</code>.</p>
<p>Now that you are familiar with the topic, let&rsquo;s proceed to building kernel
modules. This article will guide you through the following steps:</p>
<ol>
<li>Setting up a development environment with the necessary tools for building a
kernel</li>
<li>Building an out-of-tree kernel</li>
<li>Building an in-tree kernel</li>
<li>Bonus: Creating a symbolic link to our NixOS configuration flake for easy
reference to the kernel configuration used to build the system.</li>
</ol>
<h1 id="getting-the-development-environment">Getting the development environment</h1>
<p>Let&rsquo;s say you have your NixOS configured in <code>flake.nix</code> like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  inputs<span style="color:#ff79c6">.</span>nixpkgs<span style="color:#ff79c6">.</span>url <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;github:NixOS/nixpkgs/nixos-unstable-small&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  outputs <span style="color:#ff79c6">=</span> { self<span style="color:#ff79c6">,</span> nixpkgs }: {
</span></span><span style="display:flex;"><span>    nixosConfigurations <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>      my-nixos <span style="color:#ff79c6">=</span> nixpkgs<span style="color:#ff79c6">.</span>lib<span style="color:#ff79c6">.</span>nixosSystem {
</span></span><span style="display:flex;"><span>       system <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;x86_64-linux&#34;</span>;
</span></span><span style="display:flex;"><span>       modules <span style="color:#ff79c6">=</span> [ <span style="color:#f1fa8c">./configuration.nix</span> ];
</span></span><span style="display:flex;"><span>     };
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Let’s assume your NixOS flake is in <code>/etc/nixos</code>. To get a development shell
that has all the required dependencies for building a kernel and kernel modules,
you can run the command below. It will add a C compiler and some libraries
needed for compiling to your shell.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ nix develop &#34;/etc/nixos#nixosConfigurations.my-nixos.config.boot.kernel&#34;
</span></span></code></pre></div><h1 id="lets-build-a-kernel-module-with-that">Let&rsquo;s build a kernel module with that!</h1>
<p>Apart from the shell, we will also need the kernel development headers to build
a kernel module. They can be found in <code>boot.kernelPackages.kernel.dev</code>.</p>
<p>Let’s clone an example kernel module and build it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>nix-shell&gt; KERNELDIR=$(nix build --print-out-paths &#34;/etc/nixos/#nixosConfigurations.turingmachine.config.boot.kernelPackages.kernel.dev&#34;)
</span></span><span style="display:flex;"><span>nix-shell&gt; git clone https://github.com/Mic92/uptime_hack/
</span></span><span style="display:flex;"><span>nix-shell&gt; cd uptime_hack
</span></span><span style="display:flex;"><span>nix-shell&gt; make -C $KERNELDIR/lib/modules/*/build M=$(pwd)
</span></span><span style="display:flex;"><span>make: Entering directory &#39;/nix/store/i7ph759bmlgrlkbz4dj5bjbbq47gx5nw-linux-6.0.12-dev/lib/modules/6.0.12/build&#39;
</span></span><span style="display:flex;"><span>  CC [M]  /home/joerg/git/uptime_hack/uptime_hack.o
</span></span><span style="display:flex;"><span>  MODPOST /home/joerg/git/uptime_hack/Module.symvers
</span></span><span style="display:flex;"><span>  CC [M]  /home/joerg/git/uptime_hack/uptime_hack.mod.o
</span></span><span style="display:flex;"><span>  LD [M]  /home/joerg/git/uptime_hack/uptime_hack.ko
</span></span><span style="display:flex;"><span>  BTF [M] /home/joerg/git/uptime_hack/uptime_hack.ko
</span></span><span style="display:flex;"><span>Skipping BTF generation for /home/joerg/git/uptime_hack/uptime_hack.ko due to unavailability of vmlinux
</span></span><span style="display:flex;"><span>make: Leaving directory &#39;/nix/store/i7ph759bmlgrlkbz4dj5bjbbq47gx5nw-linux-6.0.12-dev/lib/modules/6.0.12/build&#39;
</span></span></code></pre></div><h1 id="in-of-tree-kernel-modules">In-of-tree kernel modules</h1>
<p>We can also use this algorithm to build in-tree kernel drivers.</p>
<p>Next, we’ll need to unpack the current kernel source and copy the kernel
configuration file to our unpacked Linux tree. The current kernel source is
stored in <code>$src</code> in the shell provided by <code>nix develop</code>. We can unpack the
kernel like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ tar -xvf &#34;$src&#34;
</span></span><span style="display:flex;"><span>$ cd linux-*
</span></span></code></pre></div><p>Then, the Linux kernel configuration is stored in <code>.config</code>. We can copy this
file from the kernel.dev package to our unpacked Linux tree:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ cp $KERNELDIR/lib/modules/*/build/.config .config
</span></span></code></pre></div><p>Next, we will compile the kernel modules. But before, we need to prepare the
build environment for building kernel modules:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ make scripts prepare modules_prepare
</span></span></code></pre></div><p>Now, let’s build the new <code>null_blk</code> block device driver like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ make -C . M=drivers/block/null_blk
</span></span></code></pre></div><h1 id="making-your-nixos-closure-refer-the-closure-it-was-build-from">Making your nixos closure refer the closure it was build from</h1>
<p>If we actually want to insert any of those drivers into the <strong>running</strong> system,
the kernel in the NixOS configuration needs to be the same as the kernel of the
booted system. So, it makes sense to check and compare the kernel versions,
which you can do like this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ nix build --print-out-paths &#34;/etc/nixos/#nixosConfigurations.my-nixos.config.boot.kernelPackages.kernel&#34;
</span></span><span style="display:flex;"><span>/nix/store/yyz5jkjsan9q7v8aa4i7697rrivzwmjz-linux-6.0.12
</span></span><span style="display:flex;"><span>$ realpath /run/booted-system/kernel
</span></span><span style="display:flex;"><span>/nix/store/yyz5jkjsan9q7v8aa4i7697rrivzwmjz-linux-6.0.12/bzImage
</span></span></code></pre></div><p>In this case, the paths match because I have not updated my Linux kernel since I
rebooted.</p>
<p>However, there is an even better way to replace the drivers with the new ones:
by adding a symlink of our NixOS flake to our NixOS system. This way, we will
always be able to refer to the flake at boot time.</p>
<p>How can you make NixOS closure contain a symlink to its own configuration flake?
By adding extra lines to <code>system.extraSystemBuilderCmds</code> like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  inputs<span style="color:#ff79c6">.</span>nixpkgs<span style="color:#ff79c6">.</span>url <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;github:NixOS/nixpkgs/nixos-unstable-small&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  outputs <span style="color:#ff79c6">=</span> { self<span style="color:#ff79c6">,</span> nixpkgs }: {
</span></span><span style="display:flex;"><span>    nixosConfigurations <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>      my-nixos <span style="color:#ff79c6">=</span> nixpkgs<span style="color:#ff79c6">.</span>lib<span style="color:#ff79c6">.</span>nixosSystem {
</span></span><span style="display:flex;"><span>        system <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;x86_64-linux&#34;</span>;
</span></span><span style="display:flex;"><span>        modules <span style="color:#ff79c6">=</span> [
</span></span><span style="display:flex;"><span>          <span style="color:#f1fa8c">./configuration.nix</span>
</span></span><span style="display:flex;"><span>          <span style="color:#6272a4"># This will add a symlink in your nixos closure</span>
</span></span><span style="display:flex;"><span>          {
</span></span><span style="display:flex;"><span>            system<span style="color:#ff79c6">.</span>extraSystemBuilderCmds <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">              ln -s </span><span style="color:#f1fa8c">${</span>self<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> $out/flake
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">            &#39;&#39;</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        ];
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>After a reboot, we can check the symlink was added by looking at
<code>/run/booted-system/flake</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ ls -la /run/booted-system/flake
</span></span><span style="display:flex;"><span>lrwxrwxrwx 2 root root 50 Jan  1  1970 /run/booted-system/flake -&gt; /nix/store/mpqvkfdn46c8b3sd4zcg2fm0y4nsya8v-source
</span></span></code></pre></div><p>Now you can refer to your NixOS configuration like this…</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>$ nix develop &#34;$(realpath /run/booted-system/flake)#nixosConfigurations.$(hostname).config.boot.kernelPackages.kernel&#34;
</span></span></code></pre></div><p>… and never have to wonder if your system is still in sync with your
configuration.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Because things in NixOS are different from what we are used to in regular Linux
distributions, hacking a kernel needs some special attention. In this tutorial,
I shared my experience of hacking the NixOS kernel.</p>
<p>For quicker iterations on building kernels, also check out the
<a href="https://nixos.wiki/wiki/Kernel_Debugging_with_QEMU" target="_blank">nixos wiki article</a> that
describes how to debug the Linux kernel with Qemu in NixOS.</p>
]]></content><category scheme="https://blog.thalheim.io/categories/nixos" term="nixos" label="nixos"/><category scheme="https://blog.thalheim.io/categories/kernel" term="kernel" label="kernel"/></entry><entry><title type="html">Cross compiling and deploying NixOS</title><link href="https://blog.thalheim.io/2022/11/27/cross-compiling-and-deploying-nixos/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2022/11/27/cross-compiling-and-deploying-nixos/</id><author><name>Jörg Thalheim and Alex A. Renoire</name></author><published>2022-11-27T00:00:00+00:00</published><updated>2022-11-27T00:00:00+00:00</updated><content type="html"><![CDATA[<h2 id="background">Background</h2>
<p>Last week I was setting up this RISCv-based HiFive Unmatched board[1] with
NixOS. Thanks to <a href="https://github.com/zhaofengli" target="_blank">zhaofengli</a> this was actually
pretty straight forward given that his
<a href="https://github.com/zhaofengli/nixos-riscv64" target="_blank">repository</a> contained a full
walk-through, images and a binary cache. So instead of spending the
<a href="https://www.meetup.com/Munich-NixOS-Meetup/" target="_blank">NixOS Munich Meetup</a> hacking on
this architecture, I had time to go further.</p>
<p>One of the thing that becomes quickly apparent while hacking on the board is
that although the board is quite beefy with 16GB of RAM and NVME, it cannot keep
up with up-to-date x86 machines. This is where cross-compiling NixOS helps.</p>
<h2 id="goal-of-this-article">Goal of this article</h2>
<p>In this article I will show you how to use NixOS on a host x86_64 machine to
debug and cross-deploy another NixOS machine. And iterate faster doing so.</p>
<p>We&rsquo;re going to do this with the following steps:</p>
<ol>
<li>How to define a cross-compiled nixos configuration in flakes</li>
<li>How to deploy from cross-compile nixos machine</li>
<li>Work-around cross-compiling issues with binfmt</li>
</ol>
<h2 id="configuring-the-flake">Configuring the flake</h2>
<p>First we need to find out the architecture we want to build on and the
architecture to build for. The easiest way to find out is using <code>nix repl</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ nix repl <span style="color:#f1fa8c">&#39;&lt;nixpkgs&gt;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#44475a">repl&gt; pkgs.system # This is our build architecture
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">&#34;x86_64-linux&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#44475a"></span># use tab completion to find the architecture you want to build <span style="color:#ff79c6">for</span>
</span></span><span style="display:flex;"><span><span style="color:#44475a">repl&gt; pkgsCross.&lt;TAB&gt;
</span></span></span></code></pre></div><p>We are interested in <code>pkgsCross.&lt;arch&gt;.system</code> here. For my board this looks
like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#44475a">repl&gt; pkgsCross.riscv64.system
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">&#34;riscv64-linux&#34;
</span></span></span></code></pre></div><p>With information we can define the cross-compiled variant of our nixos machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  inputs<span style="color:#ff79c6">.</span>nixpkgs<span style="color:#ff79c6">.</span>url <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;github:NixOS/nixpkgs/release-22.11&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  outputs <span style="color:#ff79c6">=</span> { self<span style="color:#ff79c6">,</span> nixpkgs }: {
</span></span><span style="display:flex;"><span>    nixosConfigurations <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#6272a4"># Native machine build</span>
</span></span><span style="display:flex;"><span>      my-nixos <span style="color:#ff79c6">=</span> nixpkgs<span style="color:#ff79c6">.</span>lib<span style="color:#ff79c6">.</span>nixosSystem {
</span></span><span style="display:flex;"><span>        system <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;riscv64-linux&#34;</span>;
</span></span><span style="display:flex;"><span>        modules <span style="color:#ff79c6">=</span> [ <span style="color:#f1fa8c">./configuration.nix</span> ];
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#6272a4"># Cross machine build, from x86_64</span>
</span></span><span style="display:flex;"><span>      my-nixos-from-x86_64 <span style="color:#ff79c6">=</span> nixpkgs<span style="color:#ff79c6">.</span>lib<span style="color:#ff79c6">.</span>nixosSystem {
</span></span><span style="display:flex;"><span>        modules <span style="color:#ff79c6">=</span> [
</span></span><span style="display:flex;"><span>          <span style="color:#f1fa8c">./configuration.nix</span>
</span></span><span style="display:flex;"><span>          {
</span></span><span style="display:flex;"><span>            <span style="color:#6272a4"># This is the architecture we build from (pkgs.system from above)</span>
</span></span><span style="display:flex;"><span>            nixpkgs<span style="color:#ff79c6">.</span>buildPlatform <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;x86_64-linux&#34;</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#6272a4"># pkgsCross.&lt;yourtarget&gt;.system</span>
</span></span><span style="display:flex;"><span>            nixpkgs<span style="color:#ff79c6">.</span>hostPlatform <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;riscv64-linux&#34;</span>;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        ];
</span></span><span style="display:flex;"><span>      };
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="deploying-to-the-board">Deploying to the board</h2>
<p>Now that we have this extended flake configuration, deploying the new system
closures to the board becomes easy:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ nixos-rebuild switch <span style="color:#f1fa8c">\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c"></span><span style="color:#44475a">  --fast \
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">  --build-host localhost \
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">  --target-host $target_host \
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">  --flake .#my-nixos-from-x86_64
</span></span></span></code></pre></div><p>nixos-rebuild will (1) build the system on the host machine, and then (2) copy
the build result onto the board, and finally (3) atomically switch the
configuration. The <code>--fast</code> flag here is crucial since it stops <code>nixos-rebuild</code>
from using the riscv build of nix on the x86_64 machine.</p>
<h2 id="bonus-work-around-cross-compiling-issues-with-binfmt">(Bonus) Work-around cross-compiling issues with binfmt</h2>
<p>While many packages cross-compile out-of-the box a few packages are not aware of
cross compiling and try to execute binaries they just have built on the same
machine. Since it sometimes not feasiable to fix this issues easily, one trick
is to set platform emulation support based binfmt_misc and qemu. This allows to
run the binaries directly on the NixOS host that are actually compiled for a
different architecture.</p>
<p>It also allows to test and run binaries without having to copy them over to the
target machine.</p>
<p>In order to do that, extend the host NixOS configuration</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nix" data-lang="nix"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  boot<span style="color:#ff79c6">.</span>binfmt<span style="color:#ff79c6">.</span>emulatedSystems <span style="color:#ff79c6">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;riscv64-linux&#34;</span>
</span></span><span style="display:flex;"><span>  ];
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Cross-compiling has made good progress over the years. While still not a
first-class citizen in nixpkgs is now in a usable state for deploying nixos
systems. This helps a lot to get NixOS on little computers and port Nix to new
architecture are not covered by official hydra builds.</p>
]]></content><category scheme="https://blog.thalheim.io/categories/nix" term="nix" label="nix"/><category scheme="https://blog.thalheim.io/categories/cross" term="cross" label="cross"/><category scheme="https://blog.thalheim.io/categories/compiling" term="compiling" label="compiling"/></entry><entry><title type="html">Solve Vivado Remote Connection Test Failed</title><link href="https://blog.thalheim.io/2017/04/13/solve-vivado-remote-connection-test-failed/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2017/04/13/solve-vivado-remote-connection-test-failed/</id><published>2017-04-13T00:00:00+00:00</published><updated>2017-04-13T00:00:00+00:00</updated><content type="html"><![CDATA[<p>When you are trying to get Vivado Remote Connections working on Ubuntu, you
might have an issue to establish the connection. This can be easily solved by
adding a symlink to your bash, called sh. You can do this for example using the
following commands:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ mkdir -p ~/.local/bin
</span></span><span style="display:flex;"><span>$ ln -s /bin/bash ~/.local/bin/sh
</span></span></code></pre></div><p>Thanks to ole2 for providing this solution in the xilinx forum, which you can
find here:
<a href="https://forums.xilinx.com/t5/Installation-and-Licensing/Vivado-2013-2-Launching-jobs-on-a-remote-host/td-p/396861" target="_blank">forum post</a></p>
<p>As he points out, this seem to be a bug in Vivado. Vivado seems to call a script
with #!/bin/sh and expects a bash to be executed. But for Ubuntu, /bin/sh points
to /bin/dash per default. An alternative solution is to re-configure this link
using:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ sudo dpkg-reconfigure dash
</span></span></code></pre></div><p>I had this issue in Vivado 2016.4 and Ubuntu 16.04 LTS.</p>
]]></content></entry><entry><title type="html">Rooting Intel Based Tablets on Linux Slash Mac Os X</title><link href="https://blog.thalheim.io/2015/12/25/rooting-intel-based-tablets-on-linux-slash-mac-os-x/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2015/12/25/rooting-intel-based-tablets-on-linux-slash-mac-os-x/</id><published>2015-12-25T00:00:00+00:00</published><updated>2015-12-25T00:00:00+00:00</updated><content type="html"><![CDATA[<p>In this article I will explain how to root Intel-CPU based android Devices on
Linux/Mac OS X. The instructions are based on this
<a href="http://forum.xda-developers.com/android/development/intel-android-devices-root-temp-cwm-t2975096" target="_blank">forum post</a>.
I used this code to root a Medion LIFETAB P8912. However this should also apply
to all devices mentioned in this forum post.</p>
<p>The first thing to do, is install
<a href="http://lifehacker.com/the-easiest-way-to-install-androids-adb-and-fastboot-to-1586992378" target="_blank">fastboot and adb</a>
on your PC/Mac. Make sure that you have enabled the development option on your
android device and are able to connect to it via adb.</p>
<p>Then place the update, you want to install on the sdcard on your device. In case
you want to install the root patch, you can download the latest
<a href="http://download.chainfire.eu/supersu" target="_blank">SuperSU</a>. <strong>Note</strong> that you will be not
able to install custom roms, if your bootloader is locked. If the signature
mismatch it will refuse to boot.</p>
<p>The next thing to do is to download and extract
<a href="https://www.androidfilehost.com/?fid=24052804347782876" target="_blank">IntelAndroid-FBRL-07-24-2015.7z</a>
mentioned in the post. It contains a recovery images for CWM or TWRP and some
custom trigger code to start a temporary CWM Recovery Session on the device.
After reboot this session will be gone. But you can apply updates during the
session such as SuperSU. You will <strong>not</strong> be able to follow the exact
instructions from this forum post, because it contains a windows specific batch
file and windows executables. However these are just fancy wrappers around adb
and fastboot, so you can still use the contained images/launch code.</p>
<p>To reboot your device into the bootloader, connect it to your computer and run,
while it is turned on:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ adb reboot-bootloader
</span></span></code></pre></div><p>Within the boot loader, we will first put the alternate rescue image on the
device along with some custom launcher code. I first tried TWRP on my device,
but my touchscreen didn&rsquo;t work with it, so I sticked to CWM:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span># assuming you have changed to the directory of extracted archive:
</span></span><span style="display:flex;"><span>$ fastboot flash /tmp/recovery.zip FB_RecoveryLauncher/cwm.zip
</span></span><span style="display:flex;"><span>$ fastboot flash /tmp/recovery.launcher FB_RecoveryLauncher/recovery.launcher
</span></span></code></pre></div><p>The next thing to do is to trigger the device via fastboot to start our
recovery. The forum post contained 4 alternatives approaches based on the
android device. The following (T4) was working for me:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ fastboot oem start_partitioning; fastboot flash /system/bin/logcat FB_RecoveryLauncher/fbrl.trigger; fastboot oem stop_partitioning
</span></span></code></pre></div><p>This temporary replace logcat with a launcher. It is important to execute all
commands in one shot. Otherwise fastboot will fail to flash logcat.</p>
<p>If the command will not work for you, you could one of these commands:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span># T1
</span></span><span style="display:flex;"><span>$ fastboot flash /sbin/adbd FB_RecoveryLauncher/fbrl.trigger; fastboot oem startftm
</span></span><span style="display:flex;"><span># T2
</span></span><span style="display:flex;"><span>$ fastboot flash /system/bin/cp FB_RecoveryLauncher/fbrl.trigger; fastboot oem backup_factory
</span></span><span style="display:flex;"><span># T3
</span></span><span style="display:flex;"><span>$ fastboot flash /sbin/partlink FB_RecoveryLauncher/fbrl.trigger; fastboot oem stop_partitioning
</span></span></code></pre></div><p>If everything works it should start the recovery image.</p>
]]></content></entry><entry><title type="html">Cgi Like Python Scripts With Systemd Socket Activation</title><link href="https://blog.thalheim.io/2015/06/25/cgi-like-python-scripts-with-systemd-socket-activation/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2015/06/25/cgi-like-python-scripts-with-systemd-socket-activation/</id><published>2015-06-25T00:00:00+00:00</published><updated>2015-06-25T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Lets say you want to trigger remote the start of a python script. But you don&rsquo;t
want to have a service running all the time waiting for requests.</p>
<p>What you can do, is using socket-unit in systemd, which is waiting on a tcp port
for connections and starts the service, if somebody is requesting it.</p>
<p>The systemd configuration could look like this:</p>
<ul>
<li>Listens on tcp port 3000 (both ipv4 and ipv6)</li>
<li>Execute python script as user &rsquo;nobody&rsquo; with a timeout of 5 minutes</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Start update on demand</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Socket]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">ListenStream</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">3000</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># only listen on localhost</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">#ListenStream=127.0.0.1:3000</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">BindIPv6Only</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">both</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Install]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">WantedBy</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">multi-user.target</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Start update on demand</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">JobTimeoutSec</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">5min</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Service]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">User</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">nobody</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">ExecStart</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">/usr/bin/python /path/to/script.py</span>
</span></span></code></pre></div><p>In your python code, do the following</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">systemd_socket_response</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">    Accepts every connection of the listen socket provided by systemd, send the
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">    HTTP Response &#39;OK&#39; back.
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">try</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">from</span> systemd.daemon <span style="color:#ff79c6">import</span> listen_fds;
</span></span><span style="display:flex;"><span>        fds <span style="color:#ff79c6">=</span> listen_fds()
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">except</span> ImportError:
</span></span><span style="display:flex;"><span>        fds <span style="color:#ff79c6">=</span> [<span style="color:#bd93f9">3</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">for</span> fd <span style="color:#ff79c6">in</span> fds:
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">import</span> socket
</span></span><span style="display:flex;"><span>        sock <span style="color:#ff79c6">=</span> socket<span style="color:#ff79c6">.</span>fromfd(fd, socket<span style="color:#ff79c6">.</span>AF_INET, socket<span style="color:#ff79c6">.</span>SOCK_STREAM)
</span></span><span style="display:flex;"><span>        sock<span style="color:#ff79c6">.</span>settimeout(<span style="color:#bd93f9">0</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">try</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">while</span> <span style="color:#ff79c6">True</span>:
</span></span><span style="display:flex;"><span>              conn, addr <span style="color:#ff79c6">=</span> sock<span style="color:#ff79c6">.</span>accept()
</span></span><span style="display:flex;"><span>              conn<span style="color:#ff79c6">.</span>sendall(<span style="color:#f1fa8c">b</span><span style="color:#f1fa8c">&#34;HTTP/1.1 200 OK</span><span style="color:#f1fa8c">\r\n</span><span style="color:#f1fa8c">Content-Type: text/plain</span><span style="color:#f1fa8c">\r\n</span><span style="color:#f1fa8c">Content-Length: 3</span><span style="color:#f1fa8c">\r\n\r\n</span><span style="color:#f1fa8c">OK</span><span style="color:#f1fa8c">\n</span><span style="color:#f1fa8c">&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">except</span> socket<span style="color:#ff79c6">.</span>timeout:
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">pass</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">except</span> OSError <span style="color:#ff79c6">as</span> e:
</span></span><span style="display:flex;"><span>            <span style="color:#6272a4"># Connection closed again? Don&#39;t care, we just do our job.</span>
</span></span><span style="display:flex;"><span>            <span style="color:#8be9fd;font-style:italic">print</span>(e)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">if</span> __name__ <span style="color:#ff79c6">==</span> <span style="color:#f1fa8c">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>   <span style="color:#ff79c6">if</span> os<span style="color:#ff79c6">.</span>environ<span style="color:#ff79c6">.</span>get(<span style="color:#f1fa8c">&#34;LISTEN_FDS&#34;</span>, <span style="color:#ff79c6">None</span>) <span style="color:#ff79c6">!=</span> <span style="color:#ff79c6">None</span>:
</span></span><span style="display:flex;"><span>        systemd_socket_response()
</span></span><span style="display:flex;"><span>   <span style="color:#6272a4"># here your own code begins</span>
</span></span><span style="display:flex;"><span>   do_work()
</span></span></code></pre></div><p>This still lacks of authentication and does not take any arguments. You could
protect this port using a frontend webserver with http authentication, or you
pass the listen socket to an python http server, which add some token passed
authentication. Systemd will ensure, that your service will not run more than
once at the time.</p>
]]></content></entry><entry><title type="html">Fix Sshd Socket Activation When Using Tmux Slash Screen</title><link href="https://blog.thalheim.io/2015/04/13/fix-sshd-socket-activation-when-using-tmux-slash-screen/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2015/04/13/fix-sshd-socket-activation-when-using-tmux-slash-screen/</id><published>2015-04-13T00:00:00+00:00</published><updated>2015-04-13T00:00:00+00:00</updated><content type="html"><![CDATA[<p>When using sshd.socket to start sshd on demand, detaching from a tmux/screen
session will not work. The reason is once the ssh session is closed, systemd
will terminate all remaining processes in the sshd cgroups, which affects also
the tmux/screen background process. However this behaviour can be changed using
the following drop-in file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plain" data-lang="plain"><span style="display:flex;"><span>[Service]
</span></span><span style="display:flex;"><span>KillMode=process
</span></span></code></pre></div>]]></content></entry><entry><title type="html">Ipv6 Configuration on Digitalocean on Freebsd</title><link href="https://blog.thalheim.io/2015/01/19/ipv6-configuration-on-digitalocean-on-freebsd/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2015/01/19/ipv6-configuration-on-digitalocean-on-freebsd/</id><published>2015-01-19T00:00:00+00:00</published><updated>2015-01-19T00:00:00+00:00</updated><content type="html"><![CDATA[<p>By default Digitalocean add some custom rc.d scripts for network configuration
to your droplet.</p>
<p>You can just append the content of <code>/etc/rc.digitalocean.d/droplet.conf</code> to your
<code>/etc/rc.conf</code> In my case the public ipv4 address is <code>188.166.0.1</code> and my first
ipv6 address is <code>2a03:b0c0:2:d0::2a5:f001</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">defaultrouter</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;188.166.0.1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># ipv6 address are shortened for readability</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">ipv6_defaultrouter</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;2a03:b0c0:2:d0::1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">ifconfig_vtnet0</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;inet 188.166.16.37 netmask 255.255.192.0&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">ifconfig_vtnet0_ipv6</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;inet6 2a03:b0c0:2:d0::2a5:f001 prefixlen 64&#34;</span>
</span></span></code></pre></div><p>Digitalocean provides these days for native Ipv6 for the most of its
datacenters. Unlike other hoster they are very spare, when distributing Ipv6
Addresses and only route 16 addresses per droplet
(xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxx1 until xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxf).
To make use of these additional ip addresses they have to be assigned to your
network interface <code>vtnet0</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">ifconfig_vtnet0_aliases</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet6 2a03:b0c0:2:d0::2a5:f002 prefixlen 64 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet6 2a03:b0c0:2:d0::2a5:f003 prefixlen 64 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet6 2a03:b0c0:2:d0::2a5:f004 prefixlen 64 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet6 2a03:b0c0:2:d0::2a5:f005 prefixlen 64 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet6 2a03:b0c0:2:d0::2a5:f006 prefixlen 64 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet6 2a03:b0c0:2:d0::2a5:f007 prefixlen 64 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet6 2a03:b0c0:2:d0::2a5:f008 prefixlen 64 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet6 2a03:b0c0:2:d0::2a5:f009 prefixlen 64 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet6 2a03:b0c0:2:d0::2a5:f00a prefixlen 64 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet6 2a03:b0c0:2:d0::2a5:f00b prefixlen 64 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet6 2a03:b0c0:2:d0::2a5:f00c prefixlen 64 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet6 2a03:b0c0:2:d0::2a5:f00d prefixlen 64 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet6 2a03:b0c0:2:d0::2a5:f00e prefixlen 64 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet6 2a03:b0c0:2:d0::2a5:f00f prefixlen 64&#34;</span>
</span></span></code></pre></div><p>In case you want to add freebsd jails later on, it is a good idea to allocate
private ipv4 addresses for these too. In my case I generated as many ipv4
address as ipv6 addresses I got:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">cloned_interfaces</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;</span><span style="color:#f1fa8c">${</span><span style="color:#8be9fd;font-style:italic">cloned_interfaces</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> lo1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">ifconfig_lo1_aliases</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;\
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet 192.168.67.1/24 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet 192.168.67.2/24 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet 192.168.67.3/24 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet 192.168.67.4/24 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet 192.168.67.5/24 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet 192.168.67.6/24 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet 192.168.67.7/24 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet 192.168.67.8/24 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet 192.168.67.9/24 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet 192.168.67.10/24 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet 192.168.67.11/24 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet 192.168.67.12/24 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet 192.168.67.13/24 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet 192.168.67.14/24 \
</span></span></span><span style="display:flex;"><span><span style="color:#f1fa8c">                      inet 192.168.67.15/24&#34;</span>
</span></span></code></pre></div><p>To apply these network settings immediately issue the following commands in
series:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ sudo service netif restart; sudo /etc/rc.d/routing restart
</span></span></code></pre></div><p>The second command is important because it adds the ipv4 gateway back. Otherwise
you will not reach your droplet via ipv4 without rebooting.</p>
<p>If everything still works, you can remove, the following files leftover from
cloudflare&rsquo;s provisioning:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ rm /etc/rc.d/digitalocean
</span></span><span style="display:flex;"><span>$ rm -r /etc/rc.digitalocean.d
</span></span><span style="display:flex;"><span>$ rm -r /usr/local/bsd-cloudinit/
</span></span><span style="display:flex;"><span>$ pkg remove avahi-autoipd
</span></span></code></pre></div>]]></content><category scheme="https://blog.thalheim.io/categories/freebsd" term="freebsd" label="freebsd"/><category scheme="https://blog.thalheim.io/categories/digitalocean" term="digitalocean" label="digitalocean"/><category scheme="https://blog.thalheim.io/categories/network" term="network" label="network"/></entry><entry><title type="html">Static Mac Address for Bananapi</title><link href="https://blog.thalheim.io/2015/01/06/static-mac-address-for-bananapi/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2015/01/06/static-mac-address-for-bananapi/</id><published>2015-01-06T00:00:00+00:00</published><updated>2015-01-06T00:00:00+00:00</updated><content type="html"><![CDATA[<p>The bananapi does currently assign random mac addresses to its ethnernet nic,
which is bad if you want to assign static dhcp leases. To solve this issue just
create the following udev rule:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plain" data-lang="plain"><span style="display:flex;"><span>ACTION==&#34;add&#34;, SUBSYSTEM==&#34;net&#34;, ATTR{dev_id}==&#34;0x0&#34;, RUN+=&#34;/usr/bin/ip link set dev %k address XX:XX:XX:XX:XX:XX&#34;
</span></span></code></pre></div><p>Replace XX:XX:XX:XX:XX:XX with your current mac address:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ ip address
</span></span><span style="display:flex;"><span><span style="color:#44475a">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue state UNKNOWN group
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">default
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">    inet 127.0.0.1/8 scope host lo
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">    inet6 ::1/128 scope host
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">       valid_lft forever preferred_lft forever
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">group default qlen 1000
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">    link/ether 02:8a:03:43:02:2a brd ff:ff:ff:ff:ff:ff
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">    inet 192.168.1.56/24 brd 192.168.1.255 scope global eth0
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">    inet6 fe80::8a:3ff:fe43:22a/64 scope link
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">       valid_lft forever preferred_lft forever
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">    inet6 fe80::9985:bd71:3b59:4875/64 scope link
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">       valid_lft forever preferred_lft forever
</span></span></span></code></pre></div><p>which is <code>02:8a:03:43:02:2a</code> in my case.</p>
]]></content><category scheme="https://blog.thalheim.io/categories/linux" term="linux" label="linux"/><category scheme="https://blog.thalheim.io/categories/bananapi" term="bananapi" label="bananapi"/><category scheme="https://blog.thalheim.io/categories/network" term="network" label="network"/></entry><entry><title type="html">Remove Current Binding Dot Pry From Pry</title><link href="https://blog.thalheim.io/2014/11/14/remove-current-binding-dot-pry-from-pry/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2014/11/14/remove-current-binding-dot-pry-from-pry/</id><published>2014-11-14T00:00:00+00:00</published><updated>2014-11-14T00:00:00+00:00</updated><content type="html"><![CDATA[<p>If you are a ruby user and find it annoying to remove
<a href="http://pryrepl.org/" target="_blank">binding.pry</a> by hand, you may find the following snippet
useful. (Put it in your ~/.pryrc to use it)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>Pry<span style="color:#ff79c6">.</span>config<span style="color:#ff79c6">.</span>commands<span style="color:#ff79c6">.</span>command <span style="color:#f1fa8c">&#34;remove-pry&#34;</span>, <span style="color:#f1fa8c">&#34;Remove current pry&#34;</span> <span style="color:#ff79c6">do</span>
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd;font-style:italic">require</span> <span style="color:#f1fa8c">&#39;pry/commands/edit/file_and_line_locator&#39;</span>
</span></span><span style="display:flex;"><span>  file_name, remove_line <span style="color:#ff79c6">=</span>
</span></span><span style="display:flex;"><span>Pry<span style="color:#ff79c6">::</span>Command<span style="color:#ff79c6">::</span>Edit<span style="color:#ff79c6">::</span>FileAndLineLocator<span style="color:#ff79c6">.</span>from_binding(_pry_<span style="color:#ff79c6">.</span>current_binding)
</span></span><span style="display:flex;"><span>  temp_file <span style="color:#ff79c6">=</span> Tempfile<span style="color:#ff79c6">.</span>new(<span style="color:#f1fa8c">&#39;foo&#39;</span>)
</span></span><span style="display:flex;"><span>  i <span style="color:#ff79c6">=</span> <span style="color:#bd93f9">0</span>
</span></span><span style="display:flex;"><span>  File<span style="color:#ff79c6">.</span>foreach(file_name) <span style="color:#ff79c6">do</span> <span style="color:#ff79c6">|</span>line<span style="color:#ff79c6">|</span>
</span></span><span style="display:flex;"><span>    i <span style="color:#ff79c6">+=</span> <span style="color:#bd93f9">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">if</span> i <span style="color:#ff79c6">==</span> remove_line
</span></span><span style="display:flex;"><span>      line<span style="color:#ff79c6">.</span>gsub!(<span style="color:#f1fa8c">/binding.pry(\s)?/</span>, <span style="color:#f1fa8c">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>      temp_file<span style="color:#ff79c6">.</span>write line <span style="color:#ff79c6">unless</span> line <span style="color:#ff79c6">=~</span> <span style="color:#f1fa8c">/\A[[:space:]]*\z/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">else</span>
</span></span><span style="display:flex;"><span>      temp_file<span style="color:#ff79c6">.</span>write line
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span>  temp_file<span style="color:#ff79c6">.</span>close
</span></span><span style="display:flex;"><span>  FileUtils<span style="color:#ff79c6">.</span>cp(temp_file<span style="color:#ff79c6">.</span>path, file_name)
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">end</span>
</span></span></code></pre></div><p><strong>Usage</strong></p>
<p>Before:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#6272a4"># ...</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">if</span> foo <span style="color:#ff79c6">==</span> <span style="color:#f1fa8c">:bar</span>
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd;font-style:italic">binding</span><span style="color:#ff79c6">.</span>pry
</span></span><span style="display:flex;"><span>  a_shiny_method
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># ...</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>pry<span style="color:#ff79c6">&gt;</span> remove<span style="color:#ff79c6">-</span>pry
</span></span></code></pre></div><p>After:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#6272a4"># ...</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">if</span> foo <span style="color:#ff79c6">==</span> <span style="color:#f1fa8c">:bar</span>
</span></span><span style="display:flex;"><span>  a_shiny_method
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># ...</span>
</span></span></code></pre></div>]]></content></entry><entry><title type="html">Ferm Rules for Docker</title><link href="https://blog.thalheim.io/2014/11/01/ferm-rules-for-docker/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2014/11/01/ferm-rules-for-docker/</id><published>2014-11-01T00:00:00+00:00</published><updated>2014-11-01T00:00:00+00:00</updated><content type="html"><![CDATA[<p>The Docker daemon add his own custom rules by default to iptables. If you use
<a href="http://ferm.foo-projects.org/" target="_blank">ferm</a> to manage your iptables rules, it is a
good idea to prepopulate rules for docker. Otherwise they will be overwritten by
ferm as it restarts.</p>
<p>To do so add the following lines at the top of your ferm.conf:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>domain ip {
</span></span><span style="display:flex;"><span>    table filter chain FORWARD {
</span></span><span style="display:flex;"><span>        outerface docker0 mod conntrack ctstate (RELATED ESTABLISHED) ACCEPT;
</span></span><span style="display:flex;"><span>        interface docker0 outerface !docker0 ACCEPT;
</span></span><span style="display:flex;"><span>        interface docker0 outerface docker0 ACCEPT;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    table nat {
</span></span><span style="display:flex;"><span>        chain DOCKER;
</span></span><span style="display:flex;"><span>        chain PREROUTING {
</span></span><span style="display:flex;"><span>           mod addrtype dst-type LOCAL jump DOCKER;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        chain OUTPUT {
</span></span><span style="display:flex;"><span>           daddr !127.0.0.0/8 mod addrtype dst-type LOCAL jump DOCKER;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        chain POSTROUTING {
</span></span><span style="display:flex;"><span>           saddr 172.17.0.0/16 outerface !docker0 MASQUERADE;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In my case docker&rsquo;s subnet is <code>172.17.0.0/16</code> and uses <code>docker0</code> as bridge
device.</p>
]]></content></entry><entry><title type="html">Gathering Crash Reports and User Feedback for Your Android App</title><link href="https://blog.thalheim.io/2014/06/10/gathering-crash-reports-and-user-feedback-for-your-android-app/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2014/06/10/gathering-crash-reports-and-user-feedback-for-your-android-app/</id><published>2014-06-10T00:00:00+00:00</published><updated>2014-06-10T00:00:00+00:00</updated><content type="html"><![CDATA[<p><strong>tl;dr:</strong> How-to use ACRA and a PHP-script for getting <strong>fairly pretty
crash-reports and user-feedback via email</strong> (without ugly Android email-Intents)</p>
<h2 id="introduction">Introduction</h2>
<p>I&rsquo;m the developer of
<a href="https://github.com/chaosbastler/opentraining" target="_blank">OpenTraining</a>, an open source
Android app for fitness training. I recently looked for a possibility to add a
simple feedback system to my app. There&rsquo;s an open source framework for crash
reports named <a href="https://github.com/ACRA" target="_blank">ACRA</a> that I decided to use for both
crash reports and user feedback.</p>
<p>The Google Play Store offers a crash report system as well, but if you deploy
your app on multiple app stores you might want a central instance for collecting
crash reports. For user feedback many apps simply open an email-Intent but I
don&rsquo;t think this offers a good user experience.</p>
<p>This is how the user feedback dialog and the generated mail look like:</p>
<p><figure>
  <img src="/downloads/android_feedback.jpg" alt="Android feedback dialog and feedback mail"  title="Android feedback dialog and feedback mail"  />
</figure></p>
<p>Advantages:</p>
<ul>
<li>simple</li>
<li>self-hosted</li>
<li>good workflow for smaller projects</li>
<li>only PHP required</li>
</ul>
<p>Disadvantages:</p>
<ul>
<li>does not scale (e.g. if you have 50.000+ users)</li>
</ul>
<p>If your project is pretty large you should consider another
<a href="https://github.com/ACRA/acra/wiki/Backends" target="_blank">ACRA-backend</a>. I tried some of
them, but as long as I get &lt; 20 emails per week I&rsquo;ll use the PHP backend.</p>
<p>This How-to is based on <a href="https://github.com/ACRA" target="_blank">ACRA</a> and
<a href="https://github.com/d-a-n/acra-mailer" target="_blank">ACRA-mailer</a>.</p>
<h2 id="how-to">How-To</h2>
<p>The most important changes I had to apply to my project for adding the
feedback-feature can be seen in
<a href="https://github.com/chaosbastler/opentraining/commit/19e52b76b8370e78b9d67e4110d04463d1cd2ad6" target="_blank">this commit</a>
on GitHub (but there have been some more commits concerning ACRA).</p>
<h3 id="1-add-acra-to-your-project">1. Add ACRA to your project</h3>
<ul>
<li>Open your Eclipse project</li>
<li>Add the file
<a href="http://search.maven.org/remotecontent?filepath=ch/acra/acra/4.5.0/acra-4.5.0.jar" target="_blank">acra-4.X.Y.jar</a>
to the libs folder</li>
<li>Right-click on the jar file -&gt; add to build path</li>
</ul>
<p>If you have any problems with this step have a look at the
<a href="https://github.com/ACRA/acra/wiki/BasicSetup" target="_blank">ACRA documentation</a>. There&rsquo;s also
a description for
<a href="https://github.com/ACRA/acra/wiki/AdvancedUsage#integrating-as-a-dependency-with-maven-or-gradle" target="_blank">Gradle integration</a>.</p>
<h3 id="2-use-the-acra-library">2. Use the ACRA library</h3>
<p>Create a new class that extends Application:</p>
<pre><code>import org.acra.*;
import org.acra.annotation.*;

import android.app.Application;


@ReportsCrashes(
    formKey = &quot;&quot; // This is required for backward compatibility but not used
 )


public class YourApplication extends Application{

	@Override
     public void onCreate() {
         super.onCreate();

         // The following line triggers the initialization of ACRA
         ACRA.init(this);
         ACRA.getErrorReporter().setReportSender(new ACRACrashReportMailer()); // default crash report sender
	}


}
</code></pre>
<p>Open the android manifest editor (AndroidManifest.xml)</p>
<ul>
<li>In the Application tab, click on the Browse button next to the Name field</li>
<li>Select your newly created Application class</li>
</ul>
<p>Make sure that your application requests the permission
<strong>&lsquo;android.permission.INTERNET&rsquo;</strong>.</p>
<h3 id="3-add-reportsender">3. Add ReportSender</h3>
<p>I use 2 different implementations of ReportSender:</p>
<ul>
<li>one to report crashes:
<a href="https://github.com/chaosbastler/opentraining/blob/71db0726607885fb815e230886dcebeb93817371/app/src/de/skubware/opentraining/activity/acra/ACRACrashReportMailer.java" target="_blank">ACRACrashReportMailer</a></li>
<li>one to report feedback:
<a href="https://github.com/chaosbastler/opentraining/blob/71db0726607885fb815e230886dcebeb93817371/app/src/de/skubware/opentraining/activity/acra/ACRAFeedbackMailer.java" target="_blank">ACRAFeedbackMailer</a></li>
</ul>
<p>The crash reporter sends nearly all data that&rsquo;s available, the feedback reporter
sends the user message, the date and the app version. Add both to your project.</p>
<p>Remember to change the &lsquo;BASE_URL&rsquo;. Use HTTPS if your server supports it (mine
doesn&rsquo;t).</p>
<h3 id="4-add-php-scripts">4. Add PHP scripts</h3>
<p>There are 2 PHP scripts as well:</p>
<ul>
<li>one to report crashes:
<a href="https://github.com/chaosbastler/opentraining/blob/71db0726607885fb815e230886dcebeb93817371/server/acra_crash.php" target="_blank">acra_crash.php</a></li>
<li>one to report feedback:
<a href="https://github.com/chaosbastler/opentraining/blob/71db0726607885fb815e230886dcebeb93817371/server/acra_feedback.php" target="_blank">acra_feedback.php</a></li>
</ul>
<p>You will also need the
<a href="https://github.com/chaosbastler/opentraining/blob/71db0726607885fb815e230886dcebeb93817371/server/mail_template.txt" target="_blank">mail template</a>.
Change the destination email and add the files to the webspace/server of your
choice (e.g. <a href="https://uberspace.de/" target="_blank">uberspace</a>). If you want you can change the
&ldquo;shared_secret&rdquo;, but remember to do this in the Java class as well.</p>
<h3 id="5-test-receiving-feedback">5. Test receiving feedback</h3>
<p>Now you should have a try and test sending feedback to yourself:</p>
<pre><code>ACRA.getErrorReporter().setReportSender(new ACRAFeedbackMailer());
ACRA.getErrorReporter().putCustomData(&quot;User message&quot;, &quot;Some Text here&quot;);
ACRA.getErrorReporter().handleSilentException(new NullPointerException(&quot;Test&quot;));
</code></pre>
<p>If this works you need a suitable spot for your user feedback. In most cases a
<a href="https://github.com/chaosbastler/opentraining/blob/71db0726607885fb815e230886dcebeb93817371/app/src/de/skubware/opentraining/activity/create_workout/SendExerciseFeedbackDialogFragment.java" target="_blank">dialog</a>
should be fine.</p>
<p>Consider to write your
<a href="https://github.com/chaosbastler/opentraining/blob/71db0726607885fb815e230886dcebeb93817371/app/src/de/skubware/opentraining/activity/acra/RequestExerciseUpdate.java" target="_blank">own class(es)</a>
that extend(s) Exception. Your PHP script could do further processing with this
information.</p>
<h2 id="ideas-for-further-improvements">Ideas for further improvements</h2>
<h3 id="improve-the-email-formatting">Improve the email formatting</h3>
<p>As you have a server-side script it is very easy to change the formatting of the
emails. Highlighting the user comments or the type of exception may be a good
first step.</p>
<h3 id="usage-for-larger-projects">Usage for larger projects</h3>
<p>With the use of two different implementations of ReportSender it is also
possible to use email only for sending feedback and send crash reports to
another backend that is better suited for bug tracking. For larger projects this
approach is recommended.</p>
<p><em>by Christian Skubich</em></p>
<p>eMail: <a href="mailto:christian@skubware.de">christian@skubware.de</a></p>
<p>Twitter: <a href="https://twitter.com/chaosbastler" target="_blank">@chaosbastler</a></p>
]]></content></entry><entry><title type="html">Internet Sharing Ipv4 and Ipv6 on Archlinux Using Dnsmasq</title><link href="https://blog.thalheim.io/2014/02/08/internet-sharing-ipv4-and-ipv6-on-archlinux-using-dnsmasq/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2014/02/08/internet-sharing-ipv4-and-ipv6-on-archlinux-using-dnsmasq/</id><published>2014-02-08T00:00:00+00:00</published><updated>2014-02-08T00:00:00+00:00</updated><content type="html"><![CDATA[<p><strong>Update:</strong> Added adhoc wlan network</p>
<p>A guide to connect with a different machine using a ethernet cable for internet
sharing or just transferring files:</p>
<ol>
<li>
<p>Install dnsmasq and iproute2</p>
<p>$ pacman -S dnsmasq iproute2</p>
</li>
<li>
<p>Copy over the configuration files at the end of the article and edit the
<em>/etc/conf.d/share-internet@&lt;device&gt;</em> to match your network setup. (where
&lt;device&gt; is your network device)</p>
</li>
<li>
<p>Start the sharing service with systemd</p>
<p>$ sudo systemctl start internet-sharing@<!-- raw HTML omitted -->.service</p>
</li>
</ol>
<p>After that the other machine can connect via dhcp. It will get an ipv4 address
from the <strong>10.20.0.0/24</strong> subnet and a ipv6 address from the
<strong>fd21:30c2:dd2f::</strong> subnet. Your host will be reachable via <strong>10.20.0.1</strong> or
<strong>fd21:30c2:dd2f::1</strong>. Thanks to ipv6 router advertising, an AAAA record for
each host is automatically set based on the hostname. This means if your
hostname is <em>foo</em>, all members of the network can just connect to it using the
address <em>foo</em>. You should disable the share-internet.service, if you don&rsquo;t need
it. Otherwise you might mess up network setups, if you connect to a network with
the device on which the dhcp service is running.</p>
<p>Happy networking!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span># google as an upstream dns server
</span></span><span style="display:flex;"><span>server=8.8.8.8
</span></span><span style="display:flex;"><span>server=8.8.4.4
</span></span><span style="display:flex;"><span>no-resolv
</span></span><span style="display:flex;"><span>cache-size=2000
</span></span></code></pre></div><p>Ethernet to Wlan:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span># Device which has internet access, ex: wlan0 or usb0
</span></span><span style="display:flex;"><span>EXTERNAL_DEVICE=&#34;wlp3s0&#34;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>IP4_ADDRESS=&#34;10.20.0.1&#34;
</span></span><span style="display:flex;"><span>IP4_NETMASK=&#34;24&#34;
</span></span><span style="display:flex;"><span>IP4_SUBNET=&#34;10.20.0.2,10.20.0.255&#34;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>IP6_ADDRESS=&#34;fd21:30c2:dd2f::1&#34;
</span></span><span style="display:flex;"><span>IP6_NETMASK=&#34;64&#34;
</span></span><span style="display:flex;"><span>IP6_SUBNET=&#34;fd21:30c2:dd2f::&#34;
</span></span></code></pre></div><p>Wlan to Ethernet:</p>
<p>If you have luck and your wifi driver is capable of the infrastructure mode, you
should take a look at hostadp, in my case I have to create an adhoc network. To
enable the adhoc network:</p>
<p>$ sudo systemctl enable wireless-adhoc@&lt;device&gt;.service</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span># Device which has internet access, ex: wlan0 or usb0
</span></span><span style="display:flex;"><span>EXTERNAL_DEVICE=&#34;enp0s20u2&#34;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>IP4_ADDRESS=&#34;10.20.0.1&#34;
</span></span><span style="display:flex;"><span>IP4_NETMASK=&#34;24&#34;
</span></span><span style="display:flex;"><span>IP4_SUBNET=&#34;10.20.0.100,10.20.0.199&#34;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>IP6_ADDRESS=&#34;fd21:30c2:dd2f::1&#34;
</span></span><span style="display:flex;"><span>IP6_NETMASK=&#34;64&#34;
</span></span><span style="display:flex;"><span>IP6_SUBNET=&#34;fd21:30c2:dd2f::&#34;
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Ad-hoc wireless network connectivity (%i)</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Wants</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">network.target</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Before</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">network.target</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Conflicts</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">netctl-auto@.service</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">BindsTo</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">sys-subsystem-net-devices-%i.device</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">After</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">sys-subsystem-net-devices-%i.device</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Service]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Type</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">simple</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">ExecStartPre</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">/usr/bin/rfkill unblock wifi</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">ExecStart</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">/usr/sbin//wpa_supplicant -D nl80211,wext -c/etc/wpa_supplicant/wpa_supplicant-adhoc-%I.conf -i%I</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Install]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">RequiredBy</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">share-internet@%i.service</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>ctrl_interface=DIR=/run/wpa_supplicant GROUP=wheel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span># use &#39;ap_scan=2&#39; on all devices connected to the network
</span></span><span style="display:flex;"><span>ap_scan=2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>network={
</span></span><span style="display:flex;"><span>    ssid=&#34;The.Secure.Network&#34;
</span></span><span style="display:flex;"><span>    mode=1
</span></span><span style="display:flex;"><span>    frequency=2432
</span></span><span style="display:flex;"><span>    proto=WPA
</span></span><span style="display:flex;"><span>    key_mgmt=WPA-NONE
</span></span><span style="display:flex;"><span>    pairwise=NONE
</span></span><span style="display:flex;"><span>    group=TKIP
</span></span><span style="display:flex;"><span>    psk=&#34;fnord&#34;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span># MacOS X and Networmanager aren&#39;t capable of using WPA/WPA2 for Adhoc Networks
</span></span><span style="display:flex;"><span>#network={
</span></span><span style="display:flex;"><span>#    ssid=&#34;The.Insecure.Network&#34;
</span></span><span style="display:flex;"><span>#    mode=1
</span></span><span style="display:flex;"><span>#    frequency=2432
</span></span><span style="display:flex;"><span>#    proto=WPA
</span></span><span style="display:flex;"><span>#    key_mgmt=NONE
</span></span><span style="display:flex;"><span>#    pairwise=NONE
</span></span><span style="display:flex;"><span>#    group=TKIP
</span></span><span style="display:flex;"><span>#
</span></span><span style="display:flex;"><span>#    wep_key0=&#34;fnord&#34;
</span></span><span style="display:flex;"><span>#    wep_tx_keyidx=0
</span></span><span style="display:flex;"><span>#}
</span></span></code></pre></div>]]></content><category scheme="https://blog.thalheim.io/categories/arch" term="arch" label="arch"/><category scheme="https://blog.thalheim.io/categories/dhcp" term="dhcp" label="dhcp"/><category scheme="https://blog.thalheim.io/categories/ipv6-router-advertisement" term="ipv6-router-advertisement" label="ipv6 router advertisement"/><category scheme="https://blog.thalheim.io/categories/network" term="network" label="network"/></entry><entry><title type="html">Busybox to the Rescue</title><link href="https://blog.thalheim.io/2014/01/30/busybox-to-the-rescue/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2014/01/30/busybox-to-the-rescue/</id><published>2014-01-30T00:00:00+00:00</published><updated>2014-01-30T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Some days before I broke my raspberry pie, after pacman running out of memory,
while updating my glibc. To solve such problems on any of my machines, I decided
to setup rescue systems with busybox. Therefor just install the package
<em>busybox</em> on archlinux or <em>busybox-static</em> if you are on debian. Busybox is a so
called multi-call binary. This means, it exposes different behaviour depending
on the program name, which is used to execute it. As a basic environment for the
rescue system, I created a symlinks for every command which busybox is capable
of:</p>
<pre><code>$ sudo mkdir /opt/busybox/bin

$ busybox --list | xargs -n 1 -d &quot;\n&quot; -I &quot;cmd&quot; sudo ln -s $(which busybox) /opt/busybox/bin/cmd
</code></pre>
<p>In order to be able to login in a system, where the usual shell is broken, I
added a new user called <em>rescue</em>.</p>
<pre><code>$ useradd -m -s /opt/busybox/bin/ash rescue
</code></pre>
<p>Because origin passwd uses sha256 for password hashes, which busybox is not
capable of by default you have to recreate every password, you plan to login, to
make things like su work:</p>
<pre><code>$ sudo busybox passwd -a 2 rescue # use sha1 instead of sha256
$ sudo busybox passwd -a 2 root
</code></pre>
<p>The login shell is set in this case to the one busybox provides. In order to be
able to login via ssh this shell has to be added <em>/etc/shells</em>:</p>
<pre><code>$ echo /opt/busybox/bin/ash | sudo tee -a /etc/shells
</code></pre>
<p>The last thing left, is to prepend the path with busybox symlinks, to the PATH
variable of the rescue user, to use them instead of their coreutils equivalents.</p>
<pre><code>$ echo 'export PATH=/opt/busybox/bin:$PATH' | sudo tee -a /home/rescue/.profile
</code></pre>
]]></content></entry><entry><title type="html">Permanent Remap Keys in X11</title><link href="https://blog.thalheim.io/2013/10/16/permanent-remap-keys-in-x11/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2013/10/16/permanent-remap-keys-in-x11/</id><published>2013-10-16T00:00:00+00:00</published><updated>2013-10-16T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Because my shift key got broken, I remapped Caps Lock to Shift using xmodmap:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>remove Lock = Caps_Lock
</span></span><span style="display:flex;"><span>keysym Caps_Lock = Shift_L
</span></span><span style="display:flex;"><span>add Shift = Shift_L
</span></span></code></pre></div><p>However these settings got sometimes lost. (ex: after the driver was reloaded
after suspend). Finally I found event_key_remap patch from
<a href="http://www.thenautilus.net/SW/xf86-input-evdev/en" target="_blank">here</a>, which allows to
permanently redefine keys in the xorg.conf.</p>
<p>To apply the patch under archlinux simply install
<a href="https://aur.archlinux.org/packages/xf86-input-evdev-remap/?setlang=de" target="_blank">xf86-input-evdev-remap</a>
from AUR:</p>
<pre><code>yaourt -S xf86-input-evdev-remap
</code></pre>
<p>To track down the key, you want to remap use <code>xev</code> on the terminal. Just type
the wanted keys a few times. The output will be something like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>KeyRelease event,  serial 33,  synthetic NO,  window 0x1e00001,
</span></span><span style="display:flex;"><span>    root 0x8e,  subw 0x0,  time 5672767,  (611, 262),  root:(613, 288),
</span></span><span style="display:flex;"><span>    state 0x1,  keycode 50 (keysym 0xffe1,  Shift_L),  same_screen YES
</span></span><span style="display:flex;"><span>    XLookupString gives 0 bytes:
</span></span><span style="display:flex;"><span>    XFilterEvent returns: False
</span></span></code></pre></div><p>The interesting value here is the <code>keycode</code>. Use this code to build your final
xorg.conf. In my case this was:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>#/etc/X11/xorg.conf.d/10-kb-layout.conf
</span></span><span style="display:flex;"><span>Section &#34;InputClass&#34;
</span></span><span style="display:flex;"><span>    Identifier             &#34;Keyboard Defaults&#34;
</span></span><span style="display:flex;"><span>    MatchIsKeyboard        &#34;yes&#34;
</span></span><span style="display:flex;"><span>    Option                 &#34;XkbLayout&#34; &#34;de&#34;          # Replace this with your layout
</span></span><span style="display:flex;"><span>    Option                 &#34;event_key_remap&#34; &#34;58=50&#34; # Caps Lock Key = Shift
</span></span><span style="display:flex;"><span>EndSection
</span></span></code></pre></div>]]></content></entry><entry><title type="html">Global Request Management With Restkit</title><link href="https://blog.thalheim.io/2013/09/03/global-request-management-with-restkit/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2013/09/03/global-request-management-with-restkit/</id><published>2013-09-03T00:00:00+00:00</published><updated>2013-09-03T00:00:00+00:00</updated><content type="html"><![CDATA[<p>For our latest iOS app we are using <a href="http://restkit.org" target="_blank">RestKit Framework</a>,
which is a really great and advanced library to communicate to your REST API.</p>
<p>When you have lots of requests in different areas of your project, you may want
to have a global handling for failure events. For example how an Login View, if
any of the requests gives you an 401 (Unauthorized) status code.</p>
<p>In RestKit 0.20 they introduced the opportunity to register your own
<code>RKObjectRequestOperation</code>, which is the common way to do this.</p>
<p>So at first you create a subclass of <code>RKObjectRequestOperation</code>, let&rsquo;s call it
<code>CustomRKObjectRequestOperation</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objective-c" data-lang="objective-c"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">#import &#34;RKObjectRequestOperation.h&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#ff79c6"></span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">@interface</span> <span style="color:#50fa7b">CustomRKObjectRequestOperation</span> : <span style="color:#50fa7b">RKObjectRequestOperation</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">@end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">@implementation</span> <span style="color:#50fa7b">CustomRKObjectRequestOperation</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- (<span style="color:#8be9fd">void</span>)<span style="color:#50fa7b">setCompletionBlockWithSuccess:</span>(<span style="color:#8be9fd">void</span> ( <span style="color:#ff79c6">^</span> ) ( RKObjectRequestOperation <span style="color:#ff79c6">*</span>operation , RKMappingResult <span style="color:#ff79c6">*</span>mappingResult ))<span style="color:#8be9fd;font-style:italic">success</span> <span style="color:#50fa7b">failure:</span>(<span style="color:#8be9fd">void</span> ( <span style="color:#ff79c6">^</span> ) ( RKObjectRequestOperation <span style="color:#ff79c6">*</span>operation , NSError <span style="color:#ff79c6">*</span>error ))<span style="color:#8be9fd;font-style:italic">failure</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    [<span style="color:#8be9fd;font-style:italic">super</span> <span style="color:#8be9fd;font-style:italic">setCompletionBlockWithSuccess</span>:<span style="color:#ff79c6">^</span><span style="color:#8be9fd">void</span>(RKObjectRequestOperation <span style="color:#ff79c6">*</span>operation , RKMappingResult <span style="color:#ff79c6">*</span>mappingResult) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">if</span> (success) {
</span></span><span style="display:flex;"><span>            success(operation, mappingResult);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }<span style="color:#8be9fd;font-style:italic">failure</span>:<span style="color:#ff79c6">^</span><span style="color:#8be9fd">void</span>(RKObjectRequestOperation <span style="color:#ff79c6">*</span>operation , NSError <span style="color:#ff79c6">*</span>error) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        [[NSNotificationCenter defaultCenter] <span style="color:#8be9fd;font-style:italic">postNotificationName</span>:<span style="color:#f1fa8c">@&#34;connectionFailure&#34;</span> <span style="color:#8be9fd;font-style:italic">object</span>:operation];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">if</span> (failure) {
</span></span><span style="display:flex;"><span>            failure(operation, error);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }];
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">@end</span>
</span></span></code></pre></div><p>This is the point where we overwrite the method which sets the completion and
failure block. I use the Observer Pattern (<code>NSNotificationCenter</code>) to notify
about connectionFailures.
(<a href="http://mobile.tutsplus.com/tutorials/iphone/ios-sdk_nsnotificationcenter/" target="_blank">Learn more about NSNotificationCenter</a>)</p>
<p>Of course we need to tell RestKit to use our custom <code>RKObjectRequestOperation</code>
class. You can do this by adding this line to you RestKit configuration:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objective-c" data-lang="objective-c"><span style="display:flex;"><span>[[RKObjectManager sharedManager] <span style="color:#8be9fd;font-style:italic">registerRequestOperationClass</span>:[CustomRKObjectRequestOperation <span style="color:#ff79c6">class</span>]];
</span></span></code></pre></div><p>Now we need a class where we listen to the failure notifications. You can choose
any of your class, I use the AppDelegate for this.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objective-c" data-lang="objective-c"><span style="display:flex;"><span>[[NSNotificationCenter defaultCenter] <span style="color:#8be9fd;font-style:italic">addObserver</span>:<span style="color:#8be9fd;font-style:italic">self</span> <span style="color:#8be9fd;font-style:italic">selector</span>:<span style="color:#ff79c6">@selector</span>(<span style="color:#8be9fd;font-style:italic">connectionFailedWithOperation</span>:) <span style="color:#8be9fd;font-style:italic">name</span>:<span style="color:#f1fa8c">@&#34;connectionFailure&#34;</span> <span style="color:#8be9fd;font-style:italic">object</span>:<span style="color:#8be9fd;font-style:italic">nil</span>];
</span></span></code></pre></div><p>As you should know, the <code>connectionFailedWithOperation:</code> is called when a
connection failure occurs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objective-c" data-lang="objective-c"><span style="display:flex;"><span>- (<span style="color:#8be9fd">void</span>)<span style="color:#50fa7b">connectionFailedWithOperation:</span>(NSNotification <span style="color:#ff79c6">*</span>)<span style="color:#8be9fd;font-style:italic">notification</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    RKObjectRequestOperation <span style="color:#ff79c6">*</span>operation <span style="color:#ff79c6">=</span> (RKObjectRequestOperation <span style="color:#ff79c6">*</span>)notification.object;
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">if</span> (operation) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        NSInteger statusCode <span style="color:#ff79c6">=</span> operation.HTTPRequestOperation.response.statusCode;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">switch</span> (statusCode) {
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">case</span> <span style="color:#bd93f9">0</span><span style="color:#ff79c6">:</span> <span style="color:#6272a4">// No internet connection
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>            {
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>                <span style="color:#ff79c6">break</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">case</span>  <span style="color:#bd93f9">401</span><span style="color:#ff79c6">:</span> <span style="color:#6272a4">// not authenticated
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>            {
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>                <span style="color:#ff79c6">break</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">default</span><span style="color:#ff79c6">:</span>
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>                <span style="color:#ff79c6">break</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Links:<br>
<a href="http://restkit.org" target="_blank">RestKit Framework</a><br>
<a href="http://restkit.org/api/latest/Classes/RKObjectRequestOperation.html" target="_blank">Class Documentation for RKObjectRequestOperation</a></p>
<p><em>by Albert Schulz</em><br>
If you have any questions feel free to contact me:<br>
eMail: <a href="mailto:mail@halfco.de">mail@halfco.de</a><br>
Twitter: <a href="https://twitter.com/albert_sn" target="_blank">@albert_sn</a><br>
Web: <a href="http://halfco.de" target="_blank">halfco.de</a></p>
]]></content></entry><entry><title type="html">Mongoid Use Objectid as Created At</title><link href="https://blog.thalheim.io/2013/08/23/mongoid-use-objectid-as-created-at/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2013/08/23/mongoid-use-objectid-as-created-at/</id><published>2013-08-23T00:00:00+00:00</published><updated>2013-08-23T00:00:00+00:00</updated><content type="html"><![CDATA[<p>date = &ldquo;Nov&rdquo; slug = &ldquo;Nov/mongoid-use-objectid-as-created-at&rdquo;</p>
<p>One great feature of Mongodb is, that the first bytes of each ObjectID contains
the time, they were generated. This can be exploited to mimic the well known
<code>created_at</code> field in rails. First put this file in your lib directory.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#6272a4">#lib/mongoid/created.rb</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">module</span> Mongoid
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">module</span> CreatedAt
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Returns the creation time calculated from ObjectID</span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">#</span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># @return [ Date ] the creation time</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> <span style="color:#50fa7b">created_at</span>
</span></span><span style="display:flex;"><span>      <span style="color:#8be9fd;font-style:italic">id</span><span style="color:#ff79c6">.</span>generation_time
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Set generation time of ObjectId.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Note: This will modify the ObjectId and</span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># is therefor only useful for not persisted documents</span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">#</span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># @return [ BSON::ObjectId ] the generated object id</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> <span style="color:#50fa7b">created_at</span><span style="color:#ff79c6">=</span>(date)
</span></span><span style="display:flex;"><span>      <span style="color:#8be9fd;font-style:italic">self</span><span style="color:#ff79c6">.</span>id <span style="color:#ff79c6">=</span> BSON<span style="color:#ff79c6">::</span>ObjectId<span style="color:#ff79c6">.</span>from_time(date)
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">end</span>
</span></span></code></pre></div><p>If you are still using mongoid 3 replace <code>BSON::ObjectId</code> with
<code>Moped::BSON::ObjectId</code>.</p>
<p>Now you can include this module in every Model, where you need created at.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#6272a4">#app/models/user.rb</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">class</span> <span style="color:#50fa7b">User</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">include</span> Mongoid<span style="color:#ff79c6">::</span>Document
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">include</span> Mongoid<span style="color:#ff79c6">::</span>CreatedAt
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># ...</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span>u <span style="color:#ff79c6">=</span> User<span style="color:#ff79c6">.</span>new(<span style="color:#f1fa8c">created_at</span>: <span style="color:#bd93f9">1</span><span style="color:#ff79c6">.</span>hour<span style="color:#ff79c6">.</span>ago)
</span></span><span style="display:flex;"><span>u<span style="color:#ff79c6">.</span>created_at
</span></span></code></pre></div><p>That&rsquo;s all easy enough, isn&rsquo;t it?</p>
]]></content><category scheme="https://blog.thalheim.io/categories/mongodb" term="mongodb" label="mongodb"/><category scheme="https://blog.thalheim.io/categories/rails" term="rails" label="rails"/><category scheme="https://blog.thalheim.io/categories/mongoid" term="mongoid" label="mongoid"/></entry><entry><title type="html">Use Systemd as a Cron Replacement</title><link href="https://blog.thalheim.io/2013/06/09/use-systemd-as-a-cron-replacement/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2013/06/09/use-systemd-as-a-cron-replacement/</id><published>2013-06-09T00:00:00+00:00</published><updated>2013-06-09T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Since systemd 197 timer units support calendar time events, which makes systemd
a full cron replacement. Why one would replace the good old cron? Well, because
systemd is good at executing stuff and monitor its state!</p>
<ul>
<li>with the help of journalctl you get last status and logging output, which is a
great thing to debug failing jobs:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ systemctl status reflector-update.service
</span></span><span style="display:flex;"><span><span style="color:#44475a">reflector-update.service - &#34;Update pacman&#39;s mirrorlist using reflector&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">   Loaded: loaded
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">(/etc/systemd/system/timer-weekly.target.wants/reflector-update.service)
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">   Active: inactive (dead)
</span></span></span><span style="display:flex;"><span><span style="color:#44475a"></span>
</span></span><span style="display:flex;"><span><span style="color:#44475a">Jun 09 17:58:30 higgsboson reflector[30109]: rating http://www.gtlib.gatech.edu/pub/archlinux/
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">Jun 09 17:58:30 higgsboson reflector[30109]: rating rsync://rsync.gtlib.gatech.edu/archlinux/
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">Jun 09 17:58:30 higgsboson reflector[30109]: rating http://lug.mtu.edu/archlinux/
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">Jun 09 17:58:30 higgsboson reflector[30109]: Server Rate       Time
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">...
</span></span></span></code></pre></div><ul>
<li>there are a lot of useful
<a href="http://www.freedesktop.org/software/systemd/man/systemd.exec.html" target="_blank">systemd unit options</a>
like <code>IOSchedulingPriority</code>, <code>Nice</code> or <code>JobTimeoutSec</code></li>
<li>it is possible to let depend units on other services, like mounting the nfs
host before starting the mysql-backup.service or depending on the
network.target.</li>
</ul>
<p>So let&rsquo;s get it started. The first thing you might want to do, is to replace the
default scripts located in the
<a href="http://superuser.com/questions/402781/what-is-run-parts-in-etc-crontab-and-how-do-i-use-it" target="_blank">runparts</a>
directories /etc/cron.{daily,hourly,monthly,weekly}.</p>
<p>On my distribution (archlinux) these are logrotate, man-db, shadow and updatedb:
For convenience I created a structure like /etc/cron.*:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ mkdir /etc/systemd/system/timer-<span style="color:#ff79c6">{</span>hourly,daily,weekly<span style="color:#ff79c6">}</span>.target.wants
</span></span></code></pre></div><p>and added the following timer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ <span style="color:#8be9fd;font-style:italic">cd</span> /etc/systemd/system
</span></span><span style="display:flex;"><span>$ wget https://blog.thalheim.io/downloads/timers.tar
</span></span><span style="display:flex;"><span>$ tar -xvf timers.tar <span style="color:#ff79c6">&amp;&amp;</span> rm timers.tar
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Hourly Timer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Timer]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">OnBootSec</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">5min</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">OnUnitActiveSec</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">1h</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Unit</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">timer-hourly.target</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Install]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">WantedBy</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">basic.target</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Hourly Timer Target</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">StopWhenUnneeded</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">yes</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Daily Timer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Timer]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">OnBootSec</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">10min</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">OnUnitActiveSec</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">1d</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Unit</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">timer-daily.target</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Install]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">WantedBy</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">basic.target</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Daily Timer Target</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">StopWhenUnneeded</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">yes</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Weekly Timer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Timer]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">OnBootSec</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">15min</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">OnUnitActiveSec</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">1w</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Unit</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">timer-weekly.target</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Install]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">WantedBy</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">basic.target</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Weekly Timer Target</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">StopWhenUnneeded</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">yes</span>
</span></span></code></pre></div><p>&hellip; and enable them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ systemctl <span style="color:#8be9fd;font-style:italic">enable</span> timer-hourly.timer
</span></span><span style="display:flex;"><span>$ systemctl <span style="color:#8be9fd;font-style:italic">enable</span> timer-daily.timer
</span></span><span style="display:flex;"><span>$ systemctl <span style="color:#8be9fd;font-style:italic">enable</span> timer-weekly.timer
</span></span></code></pre></div><p>These directories work like their cron equivalents, each service file located in
such a directory will be executed at the given time.</p>
<p>Now move on to the service files. If you&rsquo;re not running Arch, the paths might be
different on your system.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ <span style="color:#8be9fd;font-style:italic">cd</span> /etc/systemd/system
</span></span><span style="display:flex;"><span>$ wget https://blog.higgsboson.tk/downloads/services.tar
</span></span><span style="display:flex;"><span>$ tar -xvf services.tar <span style="color:#ff79c6">&amp;&amp;</span> rm services.tar
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Update man-db</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Service]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Nice</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">19</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">IOSchedulingClass</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">2</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">IOSchedulingPriority</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">7</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">ExecStart</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">/usr/bin/logrotate /etc/logrotate.conf</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Update man-db</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Service]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Nice</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">19</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">IOSchedulingClass</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">2</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">IOSchedulingPriority</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">7</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">ExecStart</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">/usr/bin/mandb --quiet</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Update mlocate database</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Service]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Nice</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">19</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">IOSchedulingClass</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">2</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">IOSchedulingPriority</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">7</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">ExecStart</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">/usr/bin/updatedb</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Verify integrity of password and group files</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Service]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Type</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">oneshot</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">ExecStart</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">/usr/sbin/pwck -r</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">ExecStart</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">/usr/sbin/grpck -r</span>
</span></span></code></pre></div><p>At last but not least you can disable cron:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ systemctl stop cronie <span style="color:#ff79c6">&amp;&amp;</span> systemctl disable cronie
</span></span></code></pre></div><p>If you want to execute at a special calendar events for example &ldquo;every first day
in a month&rdquo; use the
<a href="http://www.freedesktop.org/software/systemd/man/systemd.time.html" target="_blank">“OnCalendar=” option</a>
in the timer file. example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Daily Timer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Timer]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">OnCalendar</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">*-*-1 0:0:O</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Unit</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">send-bill.target</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Install]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">WantedBy</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">basic.target</span>
</span></span></code></pre></div><p>That&rsquo;s all for the moment. Have a good time using the power of systemd!</p>
<p>Below some service files, I use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;Update pacman&#39;s mirrorlist using reflector&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Service]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Nice</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">19</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">IOSchedulingClass</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">2</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">IOSchedulingPriority</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">7</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Type</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">oneshot</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">ExecStart</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">/usr/bin/reflector --verbose -l 5 --sort rate --save /etc/pacman.d/mirrorlist</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Run pkgstats</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Service]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">User</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">nobody</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">ExecStart</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">/usr/bin/pkgstats</span>
</span></span></code></pre></div><p><a href="https://bbs.archlinux.org/viewtopic.php?id=162989" target="_blank">See this link</a> for details
about my shell-based pacman notifier</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#ff79c6">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Description</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">Update pacman&#39;s package cache</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[Service]</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Nice</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">19</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Type</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">oneshot</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">IOSchedulingClass</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">2</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">IOSchedulingPriority</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">7</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">Environment</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">CHECKUPDATE_DB=/var/lib/pacman/checkupdate</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">ExecStartPre</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">/bin/sh -c &#34;/usr/bin/checkupdates &amp;gt; /var/log/pacman-updates.log&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#50fa7b">ExecStart</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">/usr/bin/pacman --sync --upgrades --downloadonly --noconfirm --dbpath=/var/lib/pacman/checkupdate</span>
</span></span></code></pre></div>]]></content><category scheme="https://blog.thalheim.io/categories/systemd" term="systemd" label="systemd"/><category scheme="https://blog.thalheim.io/categories/timer" term="timer" label="timer"/><category scheme="https://blog.thalheim.io/categories/linux" term="linux" label="linux"/><category scheme="https://blog.thalheim.io/categories/cron" term="cron" label="cron"/></entry><entry><title type="html">Automated Backups for Chef Server</title><link href="https://blog.thalheim.io/2013/04/27/automated-backups-for-chef-server/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2013/04/27/automated-backups-for-chef-server/</id><published>2013-04-27T00:00:00+00:00</published><updated>2013-04-27T00:00:00+00:00</updated><content type="html"><![CDATA[<p>In this article I will share my setup, I use to backup chef server. In the best
case, you have a dedicated machine, which has network access to your chef
server. Otherwise you will have to additionally use a different backup program
like <a href="http://www.rsnapshot.org/" target="_blank">rsnapshot</a> or
<a href="http://duplicity.nongnu.org/" target="_blank">duplicity</a> to backup the created export
directory. In my case I use a raspberry pie with a
<a href="http://www.amazon.de/dp/B0017J4IAQ?tag=gitblo-21" target="_blank">hdd docking station</a> and a
<a href="http://www.amazon.de/dp/B004VFJ9MK?tag=gitblo-21" target="_blank">power saving harddrive</a></p>
<p>To get started you will need ruby on the backup machine. I prefer using rvm for
this job. Feel free to choose your preferred way:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ curl -L https://get.rvm.io | bash -s stable --autolibs<span style="color:#ff79c6">=</span>enabled
</span></span></code></pre></div><p>To create the backup, I use the great
<a href="https://github.com/mdxp/knife-backup" target="_blank">knife-backup gem</a> of
<a href="http://www.ducea.com/" target="_blank">Marius Ducea</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ gem install knife-backup
</span></span></code></pre></div><p>Then add these scripts to your system:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ mkdir -p ~/bin <span style="color:#ff79c6">&amp;&amp;</span> <span style="color:#8be9fd;font-style:italic">cd</span> ~/bin
</span></span><span style="display:flex;"><span>$ wget http://blog.higgsboson.tk/downloads/code/chef-backup/backup-chef.sh
</span></span><span style="display:flex;"><span>$ wget http://blog.higgsboson.tk/downloads/code/chef-backup/restore-chef.sh
</span></span><span style="display:flex;"><span>$ chmod +x <span style="color:#ff79c6">{</span>backup,restore<span style="color:#ff79c6">}</span>-chef.sh
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#ff79c6">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#ff79c6"></span><span style="color:#6272a4"># optional: load rvm</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">source</span> <span style="color:#f1fa8c">&#34;</span><span style="color:#8be9fd;font-style:italic">$HOME</span><span style="color:#f1fa8c">/.rvm/scripts/rvm&#34;</span> <span style="color:#ff79c6">||</span> <span style="color:#8be9fd;font-style:italic">source</span> <span style="color:#f1fa8c">&#34;/usr/local/rvm/scripts/rvm&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">cd</span> /tmp
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">BACKUP</span><span style="color:#ff79c6">=</span>/path/to/your/backup <span style="color:#6272a4">#&amp;lt;--- EDIT THIS LINE</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">TMPDIR</span><span style="color:#ff79c6">=</span>/tmp/<span style="color:#ff79c6">$(</span>mktemp -d chef-backup-XXXX<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">MAX_BACKUPS</span><span style="color:#ff79c6">=</span><span style="color:#bd93f9">8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">cd</span> <span style="color:#8be9fd;font-style:italic">$TMPDIR</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">trap</span> <span style="color:#f1fa8c">&#34;rm -rf &#39;</span><span style="color:#8be9fd;font-style:italic">$TMPDIR</span><span style="color:#f1fa8c">&#39;&#34;</span> INT QUIT TERM EXIT
</span></span><span style="display:flex;"><span>knife --config <span style="color:#8be9fd;font-style:italic">$HOME</span>/.chef/knife-backup.rb backup <span style="color:#8be9fd;font-style:italic">export</span> -D . &amp;gt;/dev/null
</span></span><span style="display:flex;"><span>tar -cjf <span style="color:#f1fa8c">&#34;</span><span style="color:#8be9fd;font-style:italic">$BACKUP</span><span style="color:#f1fa8c">/</span><span style="color:#ff79c6">$(</span>date +%m.%d.%Y<span style="color:#ff79c6">)</span><span style="color:#f1fa8c">.tar.bz2&#34;</span> .
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># keep the last X backups</span>
</span></span><span style="display:flex;"><span>ls -t <span style="color:#f1fa8c">&#34;</span><span style="color:#8be9fd;font-style:italic">$BACKUP</span><span style="color:#f1fa8c">&#34;</span> | tail -n+<span style="color:#8be9fd;font-style:italic">$MAX_BACKUPS</span> | xargs rm -f
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#ff79c6">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#ff79c6"></span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">if</span> <span style="color:#ff79c6">[</span> <span style="color:#f1fa8c">&#34;</span><span style="color:#8be9fd;font-style:italic">$#</span><span style="color:#f1fa8c">&#34;</span> -eq <span style="color:#bd93f9">0</span> <span style="color:#ff79c6">]</span>; <span style="color:#ff79c6">then</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">echo</span> <span style="color:#f1fa8c">&#34;USAGE: </span><span style="color:#8be9fd;font-style:italic">$0</span><span style="color:#f1fa8c"> /path/to/backup&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">exit</span> <span style="color:#bd93f9">1</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">source</span> <span style="color:#f1fa8c">&#34;</span><span style="color:#8be9fd;font-style:italic">$HOME</span><span style="color:#f1fa8c">/.rvm/scripts/rvm&#34;</span> <span style="color:#ff79c6">||</span> <span style="color:#8be9fd;font-style:italic">source</span> <span style="color:#f1fa8c">&#34;/usr/local/rvm/scripts/rvm&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">cd</span> /tmp
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">TMPDIR</span><span style="color:#ff79c6">=</span>/tmp/<span style="color:#ff79c6">$(</span>mktemp -d chef-restore-XXXX<span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">cd</span> <span style="color:#f1fa8c">&#34;</span><span style="color:#8be9fd;font-style:italic">$TMPDIR</span><span style="color:#f1fa8c">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">trap</span> <span style="color:#f1fa8c">&#34;rm -rf &#39;</span><span style="color:#8be9fd;font-style:italic">$TMPDIR</span><span style="color:#f1fa8c">&#39;&#34;</span> INT QUIT TERM EXIT
</span></span><span style="display:flex;"><span>tar xf <span style="color:#8be9fd;font-style:italic">$1</span>
</span></span><span style="display:flex;"><span>knife --config <span style="color:#8be9fd;font-style:italic">$HOME</span>/.chef/knife-backup.rb backup restore -D .
</span></span></code></pre></div><p>Modify BACKUP variable to match your backup destination. Next you will need a
knife.rb to get access to your server. I suggest to create a new client:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ mkdir -p ~/.chef
</span></span><span style="display:flex;"><span>$ knife client create backup --admin --file <span style="color:#f1fa8c">&#34;</span><span style="color:#8be9fd;font-style:italic">$HOME</span><span style="color:#f1fa8c">/.chef/backup.pem&#34;</span>
</span></span><span style="display:flex;"><span>$ cat <span style="color:#f1fa8c">&lt;&lt;&#39;__EOF__</span>&#39; &gt;&gt; ~/.chef/knife-backup.rb
</span></span><span style="display:flex;"><span><span style="color:#44475a">log_level                :info
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">log_location             STDOUT
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">node_name                &#39;backup&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">client_key               &#34;#{ENV[&#34;HOME&#34;]}/.chef/backup.pem&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">chef_server_url          &#39;https://chef.yourdomain.tld&#39; # EDIT HERE
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">syntax_check_cache_path  &#34;#{ENV[&#34;HOME&#34;]}.chef/syntax_check_cache&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">__EOF__
</span></span></span><span style="display:flex;"><span><span style="color:#44475a"></span>$ knife role list <span style="color:#6272a4"># test authentication</span>
</span></span></code></pre></div><p>Now test the whole setup, by running the <code>backup-chef.sh</code> script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ ~/bin/backup-chef.sh
</span></span></code></pre></div><p>It should create a tar file in the backup directory.</p>
<p>If everything works, you can add a cronjob to automate this.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ crontab -e
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>@daily $HOME/bin/backup-chef.sh
</span></span></code></pre></div><p>To restore a backup simply run (where <code>DATE</code> is the date of the backup)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>$ ~/bin/restore-chef.sh /path/to/backup/DATE.tar.bz2
</span></span></code></pre></div><p>That&rsquo;s all folks!</p>
]]></content><category scheme="https://blog.thalheim.io/categories/chef" term="chef" label="chef"/><category scheme="https://blog.thalheim.io/categories/opscode" term="opscode" label="opscode"/><category scheme="https://blog.thalheim.io/categories/backup" term="backup" label="backup"/><category scheme="https://blog.thalheim.io/categories/cron" term="cron" label="cron"/><category scheme="https://blog.thalheim.io/categories/knife-backup" term="knife-backup" label="knife-backup"/></entry><entry><title type="html">Owncloud 5 and Nginx</title><link href="https://blog.thalheim.io/2013/04/19/owncloud-5-and-nginx/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2013/04/19/owncloud-5-and-nginx/</id><published>2013-04-19T00:00:00+00:00</published><updated>2013-04-19T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Since my last <a href="http://localhost:4000/2012/06/03/owncloud-4-and-nginx/" target="_blank">post</a>
owncloud has added
<a href="http://doc.owncloud.org/server/5.0/admin_manual/installation/installation_others.html#nginx-configuration" target="_blank">official documentation for nginx</a>.
Unfortunately the documentation there didn&rsquo;t worked for me out of the box:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plain" data-lang="plain"><span style="display:flex;"><span>2013/04/19 22:14:38 [error] 32402#0: *251 FastCGI sent in stderr: &#34;Access to the
</span></span><span style="display:flex;"><span>script &#39;/var/www/cloud&#39; has been denied (see security.limit_extensions)&#34; while
</span></span><span style="display:flex;"><span>reading response header from upstream,  client: ::1,  server:
</span></span><span style="display:flex;"><span>cloud.higgsboson.tk,  request: &#34;GET /index.php HTTP/1.1&#34;,  upstream:
</span></span><span style="display:flex;"><span>&#34;fastcgi://unix:/var/run/php-fpm.sock:&#34;,  host: &#34;cloud.higgsboson.tk&#34;
</span></span></code></pre></div><p>The problem here was again a missing fastcgi_params option.</p>
<p>To solve the problem include the following line either in
&lsquo;/etc/nginx/fastcgi_params&rsquo;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nginx" data-lang="nginx"><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span> <span style="color:#f1fa8c">SCRIPT_FILENAME</span> <span style="color:#8be9fd;font-style:italic">$document_root$fastcgi_script_name</span>;
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># ...
</span></span></span></code></pre></div><p>or in the owncloud block in nginx.conf:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nginx" data-lang="nginx"><span style="display:flex;"><span><span style="color:#ff79c6">server</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">listen</span> <span style="color:#bd93f9">80</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">server_name</span> <span style="color:#f1fa8c">cloud.example.com</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">return</span>  <span style="color:#f1fa8c">https://</span><span style="color:#8be9fd;font-style:italic">$server_name$request_uri</span>;  <span style="color:#6272a4"># enforce https
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">server</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">listen</span> <span style="color:#bd93f9">443</span> <span style="color:#f1fa8c">ssl</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">server_name</span> <span style="color:#f1fa8c">cloud.example.com</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">ssl_certificate</span> <span style="color:#f1fa8c">/etc/ssl/nginx/cloud.example.com.crt</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">ssl_certificate_key</span> <span style="color:#f1fa8c">/etc/ssl/nginx/cloud.example.com.key</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#6272a4"># Path to the root of your installation
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>  <span style="color:#ff79c6">root</span> <span style="color:#f1fa8c">/var/www/</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">client_max_body_size</span> <span style="color:#f1fa8c">10G</span>; <span style="color:#6272a4"># set max upload size
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>  <span style="color:#ff79c6">fastcgi_buffers</span> <span style="color:#bd93f9">64</span> <span style="color:#f1fa8c">4K</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">rewrite</span> <span style="color:#f1fa8c">^/caldav(.*)</span>$ <span style="color:#f1fa8c">/remote.php/caldav</span><span style="color:#8be9fd;font-style:italic">$1</span> <span style="color:#f1fa8c">redirect</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">rewrite</span> <span style="color:#f1fa8c">^/carddav(.*)</span>$ <span style="color:#f1fa8c">/remote.php/carddav</span><span style="color:#8be9fd;font-style:italic">$1</span> <span style="color:#f1fa8c">redirect</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">rewrite</span> <span style="color:#f1fa8c">^/webdav(.*)</span>$ <span style="color:#f1fa8c">/remote.php/webdav</span><span style="color:#8be9fd;font-style:italic">$1</span> <span style="color:#f1fa8c">redirect</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">index</span> <span style="color:#f1fa8c">index.php</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">error_page</span> <span style="color:#bd93f9">403</span> = <span style="color:#f1fa8c">/core/templates/403.php</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">error_page</span> <span style="color:#bd93f9">404</span> = <span style="color:#f1fa8c">/core/templates/404.php</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">location</span> ~ <span style="color:#f1fa8c">^/(data|config|\.ht|db_structure\.xml|README)</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">deny</span> <span style="color:#f1fa8c">all</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">location</span> <span style="color:#f1fa8c">/</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># The following 2 rules are only needed with webfinger
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#ff79c6">rewrite</span> <span style="color:#f1fa8c">^/.well-known/host-meta</span> <span style="color:#f1fa8c">/public.php?service=host-meta</span> <span style="color:#f1fa8c">last</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">rewrite</span> <span style="color:#f1fa8c">^/.well-known/host-meta.json</span> <span style="color:#f1fa8c">/public.php?service=host-meta-json</span>
</span></span><span style="display:flex;"><span><span style="color:#f1fa8c">last</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">rewrite</span> <span style="color:#f1fa8c">^/.well-known/carddav</span> <span style="color:#f1fa8c">/remote.php/carddav/</span> <span style="color:#f1fa8c">redirect</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">rewrite</span> <span style="color:#f1fa8c">^/.well-known/caldav</span> <span style="color:#f1fa8c">/remote.php/caldav/</span> <span style="color:#f1fa8c">redirect</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">rewrite</span> <span style="color:#f1fa8c">^(/core/doc/[^\/]+/)</span>$ <span style="color:#8be9fd;font-style:italic">$1/index.html</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">try_files</span> <span style="color:#8be9fd;font-style:italic">$uri</span> <span style="color:#8be9fd;font-style:italic">$uri/</span> <span style="color:#f1fa8c">index.php</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">location</span> ~ <span style="color:#f1fa8c">^(.+?\.php)(/.*)?$</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">try_files</span> <span style="color:#8be9fd;font-style:italic">$1</span> = <span style="color:#bd93f9">404</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">include</span> <span style="color:#f1fa8c">fastcgi_params</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">fastcgi_param</span> <span style="color:#f1fa8c">PATH_INFO</span> <span style="color:#8be9fd;font-style:italic">$2</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">fastcgi_param</span> <span style="color:#f1fa8c">HTTPS</span> on;
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># THIS LINE WAS ADDED
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#ff79c6">fastcgi_param</span> <span style="color:#f1fa8c">SCRIPT_FILENAME</span> <span style="color:#8be9fd;font-style:italic">$document_root$fastcgi_script_name</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">fastcgi_pass</span> 127.0.0.1:<span style="color:#bd93f9">9000</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Or use unix-socket with &#39;fastcgi_pass unix:/var/run/php5-fpm.sock;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#6272a4"># Optional: set long EXPIRES header on static assets
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>  <span style="color:#ff79c6">location</span> ~<span style="color:#f1fa8c">*</span> <span style="color:#f1fa8c">^.+\.(jpg|jpeg|gif|bmp|ico|png|css|js|swf)</span>$ {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">expires</span> <span style="color:#f1fa8c">30d</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Optional: Don&#39;t log access to assets
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#ff79c6">access_log</span> off;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content><category scheme="https://blog.thalheim.io/categories/nginx" term="nginx" label="nginx"/><category scheme="https://blog.thalheim.io/categories/owncloud" term="owncloud" label="owncloud"/></entry><entry><title type="html">Pubsubhubbub With Octopress</title><link href="https://blog.thalheim.io/2013/01/02/pubsubhubbub-with-octopress/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2013/01/02/pubsubhubbub-with-octopress/</id><published>2013-01-02T00:00:00+00:00</published><updated>2013-01-02T00:00:00+00:00</updated><content type="html"><![CDATA[<p>In this article I explain how to set up octopress with
<a href="https://en.wikipedia.org/wiki/PubSubHubbub" target="_blank">pubsubhubbub</a>, to get push-enabled
feeds. In my example I use <a href="http://superfeedr.com/" target="_blank">superfeedr</a>, which is free
to use.</p>
<p>After you signup up a hub, in my case
<a href="http://higgsboson.superfeedr.com" target="_blank">higgsboson.superfeedr.com</a>, you have to add a
hub reference to your atom feed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#6272a4"># ....</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># pubsubhubbub</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">hub_url</span>: http://higgsboson.superfeedr.com/ <span style="color:#6272a4"># &lt;--- replace this with your hub</span>
</span></span></code></pre></div><p>Insert this line:</p>
<p>{% raw %}</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span>    {% if site.hub_url %}<span style="color:#ff79c6">&lt;link</span> <span style="color:#50fa7b">href=</span><span style="color:#f1fa8c">&#34;{{ site.hub_url }}&#34;</span> <span style="color:#50fa7b">rel=</span><span style="color:#f1fa8c">&#34;hub&#34;</span><span style="color:#ff79c6">/&gt;</span>{% endif %}
</span></span></code></pre></div><p>{% endraw %}</p>
<p>into <code>source/atom.xml</code>. So it looks like this:</p>
<p>{% raw %}</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff79c6">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;feed</span> <span style="color:#50fa7b">xmlns=</span><span style="color:#f1fa8c">&#34;http://www.w3.org/2005/Atom&#34;</span><span style="color:#ff79c6">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;title&gt;</span><span style="color:#ff79c6">&lt;![CDATA[{{ site.title }}]]&gt;</span><span style="color:#ff79c6">&lt;/title&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;link</span> <span style="color:#50fa7b">href=</span><span style="color:#f1fa8c">&#34;{{ site.url }}/atom.xml&#34;</span> <span style="color:#50fa7b">rel=</span><span style="color:#f1fa8c">&#34;self&#34;</span><span style="color:#ff79c6">/&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;link</span> <span style="color:#50fa7b">href=</span><span style="color:#f1fa8c">&#34;{{ site.url }}/&#34;</span><span style="color:#ff79c6">/&gt;</span>
</span></span><span style="display:flex;"><span>  {% if site.hub_url %}<span style="color:#ff79c6">&lt;link</span> <span style="color:#50fa7b">href=</span><span style="color:#f1fa8c">&#34;{{ site.hub_url }}&#34;</span> <span style="color:#50fa7b">rel=</span><span style="color:#f1fa8c">&#34;hub&#34;</span><span style="color:#ff79c6">/&gt;</span>{% endif %}
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;updated&gt;</span>{{ site.time | date_to_xmlschema }}<span style="color:#ff79c6">&lt;/updated&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;id&gt;</span>{{ site.url }}/<span style="color:#ff79c6">&lt;/id&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;author&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&lt;name&gt;</span><span style="color:#ff79c6">&lt;![CDATA[{{ site.author | strip_html }}]]&gt;</span><span style="color:#ff79c6">&lt;/name&gt;</span>
</span></span><span style="display:flex;"><span>    {% if site.email %}<span style="color:#ff79c6">&lt;email&gt;</span><span style="color:#ff79c6">&lt;![CDATA[{{ site.email }}]]&gt;</span><span style="color:#ff79c6">&lt;/email&gt;</span>{% endif %}
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;/author&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;generator</span> <span style="color:#50fa7b">uri=</span><span style="color:#f1fa8c">&#34;http://octopress.org/&#34;</span><span style="color:#ff79c6">&gt;</span>Octopress<span style="color:#ff79c6">&lt;/generator&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  {% for post in site.posts limit: 20 %}
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;entry&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&lt;title</span> <span style="color:#50fa7b">type=</span><span style="color:#f1fa8c">&#34;html&#34;</span><span style="color:#ff79c6">&gt;</span><span style="color:#ff79c6">&lt;![CDATA[{{ post.title | cdata_escape }}]]&gt;</span><span style="color:#ff79c6">&lt;/title&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&lt;link</span> <span style="color:#50fa7b">href=</span><span style="color:#f1fa8c">&#34;{{ site.url }}{{ post.url }}&#34;</span><span style="color:#ff79c6">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&lt;updated&gt;</span>{{ post.date | date_to_xmlschema }}<span style="color:#ff79c6">&lt;/updated&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&lt;id&gt;</span>{{ site.url }}{{ post.id }}<span style="color:#ff79c6">&lt;/id&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&lt;content</span> <span style="color:#50fa7b">type=</span><span style="color:#f1fa8c">&#34;html&#34;</span><span style="color:#ff79c6">&gt;</span><span style="color:#ff79c6">&lt;![CDATA[{{ post.content | expand_urls: site.url | cdata_escape }}]]&gt;</span><span style="color:#ff79c6">&lt;/content&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;/entry&gt;</span>
</span></span><span style="display:flex;"><span>  {% endfor %}
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;/feed&gt;</span>
</span></span></code></pre></div><p>{% endraw %}</p>
<p>To push out updates, you have to ping your hub, this is easily done in your
deploy rake task.</p>
<p>Add these lines to the end of your deploy task in your Rakefile:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">require</span> <span style="color:#f1fa8c">&#39;net/http&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">require</span> <span style="color:#f1fa8c">&#39;uri&#39;</span>
</span></span><span style="display:flex;"><span>hub_url <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;higgsboson.superfeedr.com&#34;</span> <span style="color:#6272a4"># &lt;--- replace this with your hub</span>
</span></span><span style="display:flex;"><span>atom_url <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;http://blog.higgsboson.tk/atom.xml&#34;</span> <span style="color:#6272a4"># &lt;--- replace this with your full feed url</span>
</span></span><span style="display:flex;"><span>resp, data <span style="color:#ff79c6">=</span> Net<span style="color:#ff79c6">::</span>HTTP<span style="color:#ff79c6">.</span>post_form(URI<span style="color:#ff79c6">.</span>parse(hub_url),
</span></span><span style="display:flex;"><span>    {<span style="color:#f1fa8c">&#39;hub.mode&#39;</span> <span style="color:#ff79c6">=&gt;</span> <span style="color:#f1fa8c">&#39;publish&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#39;hub.url&#39;</span> <span style="color:#ff79c6">=&gt;</span> atom_url})
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">raise</span> <span style="color:#f1fa8c">&#34;!! Hub notification error: </span><span style="color:#f1fa8c">#{</span>resp<span style="color:#ff79c6">.</span>code<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> </span><span style="color:#f1fa8c">#{</span>resp<span style="color:#ff79c6">.</span>msg<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">, </span><span style="color:#f1fa8c">#{</span>data<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span> <span style="color:#ff79c6">unless</span> resp<span style="color:#ff79c6">.</span>code <span style="color:#ff79c6">==</span> <span style="color:#f1fa8c">&#34;204&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">puts</span> <span style="color:#f1fa8c">&#34;## Notified hub (&#34;</span> <span style="color:#ff79c6">+</span> hub_url <span style="color:#ff79c6">+</span> <span style="color:#f1fa8c">&#34;) that feed </span><span style="color:#f1fa8c">#{</span>atom_url<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> has been updated&#34;</span>
</span></span></code></pre></div><p>So you end up with something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>desc <span style="color:#f1fa8c">&#34;Default deploy task&#34;</span>
</span></span><span style="display:flex;"><span>task <span style="color:#f1fa8c">:deploy</span> <span style="color:#ff79c6">do</span>
</span></span><span style="display:flex;"><span>  <span style="color:#6272a4"># Check if preview posts exist, which should not be published</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">if</span> File<span style="color:#ff79c6">.</span>exists?(<span style="color:#f1fa8c">&#34;.preview-mode&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">puts</span> <span style="color:#f1fa8c">&#34;## Found posts in preview mode, regenerating files ...&#34;</span>
</span></span><span style="display:flex;"><span>    File<span style="color:#ff79c6">.</span>delete(<span style="color:#f1fa8c">&#34;.preview-mode&#34;</span>)
</span></span><span style="display:flex;"><span>    Rake<span style="color:#ff79c6">::</span>Task<span style="color:#ff79c6">[</span><span style="color:#f1fa8c">:generate</span><span style="color:#ff79c6">].</span>execute
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  Rake<span style="color:#ff79c6">::</span>Task<span style="color:#ff79c6">[</span><span style="color:#f1fa8c">:copydot</span><span style="color:#ff79c6">].</span>invoke(source_dir, public_dir)
</span></span><span style="display:flex;"><span>  Rake<span style="color:#ff79c6">::</span>Task<span style="color:#ff79c6">[</span><span style="color:#f1fa8c">&#34;</span><span style="color:#f1fa8c">#{</span>deploy_default<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span><span style="color:#ff79c6">].</span>execute
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd;font-style:italic">require</span> <span style="color:#f1fa8c">&#39;net/http&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd;font-style:italic">require</span> <span style="color:#f1fa8c">&#39;uri&#39;</span>
</span></span><span style="display:flex;"><span>  hub_url <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;higgsboson.superfeedr.com&#34;</span> <span style="color:#6272a4"># &lt;--- replace this with your hub</span>
</span></span><span style="display:flex;"><span>  atom_url <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#34;http://blog.higgsboson.tk/atom.xml&#34;</span> <span style="color:#6272a4"># &lt;--- replace this with your full feed url</span>
</span></span><span style="display:flex;"><span>  resp, data <span style="color:#ff79c6">=</span> Net<span style="color:#ff79c6">::</span>HTTP<span style="color:#ff79c6">.</span>post_form(URI<span style="color:#ff79c6">.</span>parse(hub_url),
</span></span><span style="display:flex;"><span>                                   {<span style="color:#f1fa8c">&#39;hub.mode&#39;</span> <span style="color:#ff79c6">=&gt;</span> <span style="color:#f1fa8c">&#39;publish&#39;</span>,
</span></span><span style="display:flex;"><span>                                    <span style="color:#f1fa8c">&#39;hub.url&#39;</span> <span style="color:#ff79c6">=&gt;</span> atom_url})
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">raise</span> <span style="color:#f1fa8c">&#34;!! Hub notification error: </span><span style="color:#f1fa8c">#{</span>resp<span style="color:#ff79c6">.</span>code<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> </span><span style="color:#f1fa8c">#{</span>resp<span style="color:#ff79c6">.</span>msg<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">, </span><span style="color:#f1fa8c">#{</span>data<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span> <span style="color:#ff79c6">unless</span> resp<span style="color:#ff79c6">.</span>code <span style="color:#ff79c6">==</span> <span style="color:#f1fa8c">&#34;204&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd;font-style:italic">puts</span> <span style="color:#f1fa8c">&#34;## Notified hub (&#34;</span> <span style="color:#ff79c6">+</span> hub_url <span style="color:#ff79c6">+</span> <span style="color:#f1fa8c">&#34;) that feed </span><span style="color:#f1fa8c">#{</span>atom_url<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> has been updated&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">end</span>
</span></span></code></pre></div><p>Now whenever you run <code>rake deploy</code>, it will automatically update your hub.</p>
<p>If you have a jabber or google talk account, you can easily verify your setup by
adding <a href="https://push-bot.appspot.com/" target="_blank">push-bot</a> to your contact list and
subscribe to your feed.</p>
]]></content><category scheme="https://blog.thalheim.io/categories/superfeedr" term="superfeedr" label="superfeedr"/><category scheme="https://blog.thalheim.io/categories/octopress" term="octopress" label="octopress"/><category scheme="https://blog.thalheim.io/categories/pubsubhubbub" term="pubsubhubbub" label="pubsubhubbub"/><category scheme="https://blog.thalheim.io/categories/real-time" term="real-time" label="real-time"/></entry><entry><title type="html">Icinga and Pnp4nagios With Nginx</title><link href="https://blog.thalheim.io/2012/12/09/icinga-and-pnp4nagios-with-nginx/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2012/12/09/icinga-and-pnp4nagios-with-nginx/</id><published>2012-12-09T00:00:00+00:00</published><updated>2012-12-09T00:00:00+00:00</updated><content type="html"><![CDATA[<p>In this article I will show my nginx configuration for the
<a href="https://www.icinga.org/" target="_blank">icinga</a> web interface. At the time of writing I
installed version 1.8 on ubuntu 12.04 using this
<a href="https://launchpad.net/~formorer/&#43;archive/icinga" target="_blank">ppa</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#44475a">    $ sudo add-apt-repository ppa:formorer/icinga
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">    $ sudo add-apt-repository ppa:formorer/icinga-web
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">    $ sudo apt-get update
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">    # without --no-install-recommends, it will try to install apache
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">    $ sudo apt-get --no-install-recommends install icinga-web
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">    $ sudo apt-get install icinga-web-pnp # optional: for pnp4nagios
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">    $ sudo apt-get install nginx php5-fpm # if not already installed
</span></span></span></code></pre></div><p>For php I just use php-fpm without a special configuration. If you installed
icinga from source, you have change the roots to match your installation path
(to <code>/usr/local/icinga-web/</code>)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nginx" data-lang="nginx"><span style="display:flex;"><span><span style="color:#ff79c6">upstream</span> <span style="color:#f1fa8c">fpm</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">server</span> <span style="color:#f1fa8c">unix:/var/run/php5-fpm.sock</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">server</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">listen</span> <span style="color:#bd93f9">80</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">listen</span> <span style="color:#bd93f9">443</span> <span style="color:#f1fa8c">ssl</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># FIXME
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#ff79c6">server_name</span> <span style="color:#f1fa8c">icinga.yourdomain.tld</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">access_log</span> <span style="color:#f1fa8c">/var/log/nginx/icinga.access.log</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">error_log</span> <span style="color:#f1fa8c">/var/log/nginx/icinga.error.log</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># FIXME
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#ff79c6">ssl_certificate</span> <span style="color:#f1fa8c">/etc/ssl/private/icinga.yourdomain.tld.crt</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">ssl_certificate_key</span> <span style="color:#f1fa8c">/etc/ssl/private/icinga.yourdomain.tld.pem</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Security - Basic configuration
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#ff79c6">location</span> = <span style="color:#f1fa8c">/favicon.ico</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">log_not_found</span> off;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">access_log</span> off;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">expires</span> <span style="color:#f1fa8c">max</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">location</span> = <span style="color:#f1fa8c">/robots.txt</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">allow</span> <span style="color:#f1fa8c">all</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">log_not_found</span> off;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">access_log</span> off;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># Deny access to hidden files
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#ff79c6">location</span> ~ <span style="color:#f1fa8c">/\.</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">deny</span> <span style="color:#f1fa8c">all</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">access_log</span> off;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">log_not_found</span> off;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">root</span> <span style="color:#f1fa8c">/usr/share/icinga-web/pub</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">location</span> <span style="color:#f1fa8c">/icinga-web/styles</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">alias</span> <span style="color:#f1fa8c">/usr/share/icinga-web/pub/styles</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">location</span> <span style="color:#f1fa8c">/icinga-web/images</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">alias</span> <span style="color:#f1fa8c">/usr/share/icinga-web/pub/images</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">location</span> <span style="color:#f1fa8c">/icinga-web/js</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">alias</span> <span style="color:#f1fa8c">/usr/share/icinga-web/lib</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">location</span> <span style="color:#f1fa8c">/icinga-web/modules</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">rewrite</span> <span style="color:#f1fa8c">^/icinga-web/(.*)</span>$ <span style="color:#f1fa8c">/index.php?/</span><span style="color:#8be9fd;font-style:italic">$1</span> <span style="color:#f1fa8c">last</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">location</span> <span style="color:#f1fa8c">/icinga-web/web</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">rewrite</span> <span style="color:#f1fa8c">^/icinga-web/(.*)</span>$ <span style="color:#f1fa8c">/index.php?/</span><span style="color:#8be9fd;font-style:italic">$1</span> <span style="color:#f1fa8c">last</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">#&gt;&gt;&gt; configuration for pnp4nagios
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#ff79c6">location</span> <span style="color:#f1fa8c">/pnp4nagios</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">alias</span> <span style="color:#f1fa8c">/usr/share/pnp4nagios/html</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">location</span> ~ <span style="color:#f1fa8c">^(/pnp4nagios.*\.php)(.*)$</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">root</span> <span style="color:#f1fa8c">/usr/share/pnp4nagios/html</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">include</span> <span style="color:#f1fa8c">fastcgi_params</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">fastcgi_split_path_info</span> <span style="color:#f1fa8c">^(.+\.php)(.*)</span>$;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">fastcgi_param</span> <span style="color:#f1fa8c">PATH_INFO</span> <span style="color:#8be9fd;font-style:italic">$fastcgi_path_info</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">fastcgi_param</span> <span style="color:#f1fa8c">SCRIPT_FILENAME</span> <span style="color:#8be9fd;font-style:italic">$document_root/index.php</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">fastcgi_pass</span> <span style="color:#f1fa8c">fpm</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4">#&lt;&lt;&lt;
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">location</span> <span style="color:#f1fa8c">/</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">root</span>   <span style="color:#f1fa8c">/usr/share/icinga-web/pub</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">index</span> <span style="color:#f1fa8c">index.php</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">location</span> ~<span style="color:#f1fa8c">*</span> <span style="color:#f1fa8c">^/(robots.txt|static|images)</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">break</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">if</span> <span style="color:#f1fa8c">(</span><span style="color:#8be9fd;font-style:italic">$uri</span> <span style="color:#f1fa8c">!~</span> <span style="color:#f1fa8c">&#34;^/(favicon.ico|robots.txt|static|index.php)&#34;)</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">rewrite</span> <span style="color:#f1fa8c">^/([^?]*)</span>$ <span style="color:#f1fa8c">/index.php?/</span><span style="color:#8be9fd;font-style:italic">$1</span> <span style="color:#f1fa8c">last</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">location</span> ~ <span style="color:#f1fa8c">\.php$</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">include</span> <span style="color:#f1fa8c">/etc/nginx/fastcgi_params</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">fastcgi_split_path_info</span> <span style="color:#f1fa8c">^(/icinga-web)(/.*)</span>$;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">fastcgi_pass</span> <span style="color:#f1fa8c">fpm</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">fastcgi_index</span> <span style="color:#f1fa8c">index.php</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">include</span> <span style="color:#f1fa8c">/etc/nginx/fastcgi_params</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content><category scheme="https://blog.thalheim.io/categories/icinga" term="icinga" label="icinga"/><category scheme="https://blog.thalheim.io/categories/pnp4nagios" term="pnp4nagios" label="pnp4nagios"/><category scheme="https://blog.thalheim.io/categories/nginx" term="nginx" label="nginx"/><category scheme="https://blog.thalheim.io/categories/icinga-web" term="icinga-web" label="icinga-web"/></entry><entry><title type="html">Systemd on Raspbian</title><link href="https://blog.thalheim.io/2012/09/19/systemd-on-raspbian/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2012/09/19/systemd-on-raspbian/</id><published>2012-09-19T00:00:00+00:00</published><updated>2012-09-19T00:00:00+00:00</updated><content type="html"><![CDATA[<p>As I like the stability and raw speed of systemd, I wanted to leave debian&rsquo;s
init system behind and switch to systemd.</p>
<p>The basic installation is pretty easy:</p>
<pre><code>$ apt-get install systemd
</code></pre>
<p>Then you need to tell the kernel to use systemd as the init system:</p>
<p>To do so, append <code>init=/bin/systemd</code> to the end of <code>/boot/cmdline.txt</code> line</p>
<pre><code>$ cat /boot/cmdline.txt
dwc_otg.lpm_enable=0 console=ttyAMA0,115200 kgdboc=ttyAMA0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait init=/bin/systemd
</code></pre>
<p>If you reboot, systemd will be used instead of the default init script.</p>
<p>Currently debians version of systemd doesn&rsquo;t ship many service files by default.
Systemd will automatically fallback to the lsb script, if a service file for a
daemon is missing. So the speedup isn&rsquo;t as big as on other distributions such as
archlinux or fedora, which provide a deeper integration.</p>
<p>To get a quick overview, which services are started nativly, type the following
command:</p>
<pre><code>$ systemctl list-units
</code></pre>
<p>All descriptions containing <code>LSB: </code> are launched through lsb scripts.</p>
<p>Writing your own service files, is straight forward. If you add custom service
files, put them in /etc/systemd/system, so they will not get overwritten by
updates.</p>
<p>To get further information about systemd, I recommend the
<a href="https://wiki.archlinux.org/index.php/Systemd" target="_blank">great archlinux wiki article</a>.</p>
<p>At the end of this article, I provide some basic one, I use. I port them over
mostly from archlinux. In the most cases, i just have adjusted the path of the
binary to get them working. (from /usr/bin to /usr/sbin for ex.) It is
important, that the service name match with the initscript, so it will be used
instead by systemd. This will not work in all cases like dhcpcd which contains
the specific network device (like dhcpcd@eth0). In this case, you have to remove
origin service with <code>update-rc.d</code> and enable the service file with
<code>systemctl enable</code>.</p>
<p>Also available as <a href="https://gist.github.com/ac8ab2e84125ededa5c5" target="_blank">gist</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plain" data-lang="plain"><span style="display:flex;"><span># IMPORTANT: only works with dhcpcd5 not the old dhcpcd3!
</span></span><span style="display:flex;"><span>[Unit]
</span></span><span style="display:flex;"><span>Description=dhcpcd on %I
</span></span><span style="display:flex;"><span>Wants=network.target
</span></span><span style="display:flex;"><span>Before=network.target
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[Service]
</span></span><span style="display:flex;"><span>Type=forking
</span></span><span style="display:flex;"><span>PIDFile=/run/dhcpcd-%I.pid
</span></span><span style="display:flex;"><span>ExecStart=/sbin/dhcpcd -A -q -w %I
</span></span><span style="display:flex;"><span>ExecStop=/sbin/dhcpcd -k %I
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[Install]
</span></span><span style="display:flex;"><span>Alias=multi-user.target.wants/dhcpcd@eth0.service
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plain" data-lang="plain"><span style="display:flex;"><span>[Unit]
</span></span><span style="display:flex;"><span>Description=Pro-active monitoring utility for unix systems
</span></span><span style="display:flex;"><span>After=network.target
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[Service]
</span></span><span style="display:flex;"><span>Type=simple
</span></span><span style="display:flex;"><span>ExecStart=/usr/bin/monit -I
</span></span><span style="display:flex;"><span>ExecStop=/usr/bin/monit quit
</span></span><span style="display:flex;"><span>ExecReload=/usr/bin/monit reload
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[Install]
</span></span><span style="display:flex;"><span>WantedBy=multi-user.target
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plain" data-lang="plain"><span style="display:flex;"><span>[Unit]
</span></span><span style="display:flex;"><span>Description=Network Time Service
</span></span><span style="display:flex;"><span>After=network.target nss-lookup.target
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[Service]
</span></span><span style="display:flex;"><span>Type=forking
</span></span><span style="display:flex;"><span>PrivateTmp=true
</span></span><span style="display:flex;"><span>ExecStart=/usr/sbin/ntpd -g -u ntp:ntp
</span></span><span style="display:flex;"><span>ControlGroup=cpu:/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[Install]
</span></span><span style="display:flex;"><span>WantedBy=multi-user.target
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plain" data-lang="plain"><span style="display:flex;"><span>[Unit]
</span></span><span style="display:flex;"><span>Description=SSH Key Generation
</span></span><span style="display:flex;"><span>ConditionPathExists=|!/etc/ssh/ssh_host_key
</span></span><span style="display:flex;"><span>ConditionPathExists=|!/etc/ssh/ssh_host_key.pub
</span></span><span style="display:flex;"><span>ConditionPathExists=|!/etc/ssh/ssh_host_ecdsa_key
</span></span><span style="display:flex;"><span>ConditionPathExists=|!/etc/ssh/ssh_host_ecdsa_key.pub
</span></span><span style="display:flex;"><span>ConditionPathExists=|!/etc/ssh/ssh_host_dsa_key
</span></span><span style="display:flex;"><span>ConditionPathExists=|!/etc/ssh/ssh_host_dsa_key.pub
</span></span><span style="display:flex;"><span>ConditionPathExists=|!/etc/ssh/ssh_host_rsa_key
</span></span><span style="display:flex;"><span>ConditionPathExists=|!/etc/ssh/ssh_host_rsa_key.pub
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[Service]
</span></span><span style="display:flex;"><span>ExecStart=/usr/bin/ssh-keygen -A
</span></span><span style="display:flex;"><span>Type=oneshot
</span></span><span style="display:flex;"><span>RemainAfterExit=yes
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[Install]
</span></span><span style="display:flex;"><span>WantedBy=multi-user.target
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plain" data-lang="plain"><span style="display:flex;"><span>[Unit]
</span></span><span style="display:flex;"><span>Conflicts=ssh.service
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[Socket]
</span></span><span style="display:flex;"><span>ListenStream=22
</span></span><span style="display:flex;"><span>Accept=yes
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[Install]
</span></span><span style="display:flex;"><span>WantedBy=sockets.target
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plain" data-lang="plain"><span style="display:flex;"><span>[Unit]
</span></span><span style="display:flex;"><span>Description=SSH Per-Connection Server
</span></span><span style="display:flex;"><span>Requires=sshdgenkeys.service
</span></span><span style="display:flex;"><span>After=syslog.target
</span></span><span style="display:flex;"><span>After=sshdgenkeys.service
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[Service]
</span></span><span style="display:flex;"><span>ExecStartPre=/bin/mkdir -m700 -p /var/run/sshd
</span></span><span style="display:flex;"><span>ExecStart=-/usr/sbin/sshd -i
</span></span><span style="display:flex;"><span>ExecReload=/bin/kill -HUP $MAINPID
</span></span><span style="display:flex;"><span>StandardInput=socket
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plain" data-lang="plain"><span style="display:flex;"><span>[Unit]
</span></span><span style="display:flex;"><span>Description=Daemon which acts upon network cable insertion/removal
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[Service]
</span></span><span style="display:flex;"><span>Type=forking
</span></span><span style="display:flex;"><span>PIDFile=/run/ifplugd.%i.pid
</span></span><span style="display:flex;"><span>ExecStart=/usr/sbin/ifplugd %i
</span></span><span style="display:flex;"><span>SuccessExitStatus=0 1 2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[Install]
</span></span><span style="display:flex;"><span>WantedBy=multi-user.target
</span></span></code></pre></div>]]></content><category scheme="https://blog.thalheim.io/categories/systemd" term="systemd" label="systemd"/><category scheme="https://blog.thalheim.io/categories/raspberry-pie" term="raspberry-pie" label="raspberry pie"/><category scheme="https://blog.thalheim.io/categories/raspbian" term="raspbian" label="raspbian"/></entry><entry><title type="html">Init Script for Pyload on Gentoo</title><link href="https://blog.thalheim.io/2012/06/30/init-script-for-pyload-on-gentoo/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2012/06/30/init-script-for-pyload-on-gentoo/</id><published>2012-06-30T00:00:00+00:00</published><updated>2012-06-30T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>initscript to run pyload on gentoo as a service</blockquote><p>Because I use a custom installation of <a href="http://pyload.org/" target="_blank">pyload</a> I had to
write my own init script.</p>
<p>my setup:</p>
<ul>
<li>runs as a user with its home directory set to /home/pyload</li>
<li>python files are located in /home/pyload/bin</li>
<li>configuration files are located in /home/pyload/.pyload</li>
</ul>
<p>Here is the init script I use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span>#!/sbin/runscript
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#44475a">depend() {
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">    need net
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">}
</span></span></span><span style="display:flex;"><span><span style="color:#44475a"></span>
</span></span><span style="display:flex;"><span><span style="color:#44475a">PYLOAD_USER=${PYLOAD_USER:-root}
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">PYLOAD_GROUP=${PYLOAD_GROUP:-root}
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">PYLOAD_CONFDIR=${PYLOAD_CONFDIR:-/etc/pyload}
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">PYLOAD_PIDFILE=${PYLOAD_PIDFILE:-/var/run/${SVCNAME}.pid}
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">PYLOAD_EXEC=${PYLOAD_EXEC:-/usr/bin/pyload}
</span></span></span><span style="display:flex;"><span><span style="color:#44475a"></span>
</span></span><span style="display:flex;"><span><span style="color:#44475a">start() {
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">  ebegin &#34;Starting pyload&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">  start-stop-daemon --start --exec &#34;${PYLOAD_EXEC}&#34; \
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">      --pidfile $PYLOAD_PIDFILE \
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">      --user $PYLOAD_USER:$PYLOAD_GROUP \
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">      -- -p $PYLOAD_PIDFILE --daemon ${PYLOAD_OPTIONS}
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">  eend $? &#34;Failed to start pyload&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">}
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">stop() {
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">  ebegin &#34;Stopping pyload&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">  start-stop-daemon --stop \
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">    --pidfile $PYLOAD_PIDFILE \
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">    --exec &#34;${PYLOAD_EXEC}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">  eend $? &#34;Failed to stop pyload&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">}
</span></span></span></code></pre></div><p>Here is the configuration:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#44475a">PYLOAD_USER=pyload
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">PYLOAD_GROUP=pyload
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">PYLOAD_EXEC=/home/pyload/bin/pyLoadCore.py
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">PYLOAD_CONFDIR=/home/pyload/.pyload
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">PYLOAD_PIDFILE=/home/pyload/${SVCNAME}.pid
</span></span></span><span style="display:flex;"><span><span style="color:#44475a">PYLOAD_OPTIONS=
</span></span></span></code></pre></div>]]></content></entry><entry><title type="html">Use Your Ssh Server as a Socks Proxy</title><link href="https://blog.thalheim.io/2012/06/09/use-your-ssh-server-as-a-socks-proxy/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2012/06/09/use-your-ssh-server-as-a-socks-proxy/</id><published>2012-06-09T00:00:00+00:00</published><updated>2012-06-09T00:00:00+00:00</updated><content type="html"><![CDATA[<p>Sometimes for whatever reason you want a secure internet connection. Maybe
because you distrust your local network or your network filter some traffic.
Openssh is able to speak the
<a href="http://en.wikipedia.org/wiki/SOCKS" target="_blank">SOCKS protocol</a>, which does the trick.</p>
<p>Open you ~/.ssh/config on your local machine and add the following lines:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-apache" data-lang="apache"><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">Host</span> webtunnel
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd;font-style:italic">HostName</span> domain.tld # replace this with your ip or domain name of your server
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd;font-style:italic">DynamicForward</span> <span style="color:#bd93f9">1080</span>
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd;font-style:italic">User</span> myuser # replace this with your ssh login name
</span></span></code></pre></div><p>next connect to your server like this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-console" data-lang="console"><span style="display:flex;"><span><span style="color:#44475a">ssh webtunnel
</span></span></span></code></pre></div><p>This opens a socks connection on your local machine on port 1080. Now you are
able to set up every application to use this proxy. These are the common
required settings:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>Server: localhost
</span></span><span style="display:flex;"><span>Port: 1080
</span></span><span style="display:flex;"><span>Proxy-Type: SOCKS5
</span></span></code></pre></div><p>Personally I use <a href="http://getfoxyproxy.org/" target="_blank">FoxProxy Basic</a> extension for
firefox to fast setup a connection, whenever needed.</p>
]]></content><category scheme="https://blog.thalheim.io/categories/ssh" term="ssh" label="ssh"/><category scheme="https://blog.thalheim.io/categories/socks-proxy" term="socks-proxy" label="socks proxy"/><category scheme="https://blog.thalheim.io/categories/browser" term="browser" label="browser"/></entry><entry><title type="html">Owncloud 4 and Nginx</title><link href="https://blog.thalheim.io/2012/06/03/owncloud-4-and-nginx/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://blog.thalheim.io/2012/06/03/owncloud-4-and-nginx/</id><published>2012-06-03T00:00:00+00:00</published><updated>2012-06-03T00:00:00+00:00</updated><content type="html"><![CDATA[<p><strong>updated at Do 14. Jul 2012</strong></p>
<p>Short after writing this entry, I discover <a href="http://nblock.org/2012/03/12/nginx-and-owncloud" target="_blank">a good one</a>.</p>
<p>Nginx don&rsquo;t understand the .htaccess, which is shipped with owncloud. So some
rewrites, required by the webdav implementation, aren&rsquo;t applied. To get owncloud
running, some additional options are necessary:</p>
<h2 id="nginx">Nginx</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nginx" data-lang="nginx"><span style="display:flex;"><span><span style="color:#ff79c6">upstream</span> <span style="color:#f1fa8c">backend</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">unix:/var/run/php-fpm.sock</span>; <span style="color:#6272a4"># &lt;--- edit me
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># force https
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">server</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">listen</span>         <span style="color:#bd93f9">80</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">server_name</span>    <span style="color:#f1fa8c">cloud.site.com</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">rewrite</span>        <span style="color:#f1fa8c">^</span> <span style="color:#f1fa8c">https://</span><span style="color:#8be9fd;font-style:italic">$server_name$request_uri?</span> <span style="color:#f1fa8c">permanent</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">server</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">listen</span> <span style="color:#bd93f9">443</span> <span style="color:#f1fa8c">ssl</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">ssl_certificate</span> <span style="color:#f1fa8c">/etc/ssl/nginx/nginx.crt</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">ssl_certificate_key</span> <span style="color:#f1fa8c">/etc/ssl/nginx/nginx.key</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">server_name</span> <span style="color:#f1fa8c">cloud.site.com</span>; <span style="color:#6272a4"># &lt;--- edit me
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#ff79c6">root</span> <span style="color:#f1fa8c">/var/web/MyOwncloud</span>;   <span style="color:#6272a4"># &lt;--- edit me
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#ff79c6">index</span> <span style="color:#f1fa8c">index.php</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">client_max_body_size</span> <span style="color:#f1fa8c">20M</span>; <span style="color:#6272a4"># set maximum upload size
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">access_log</span> <span style="color:#f1fa8c">/var/log/nginx/cloud.access_log</span> <span style="color:#f1fa8c">main</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">error_log</span> <span style="color:#f1fa8c">/var/log/nginx/cloud.error_log</span> <span style="color:#f1fa8c">info</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">location</span> ~<span style="color:#f1fa8c">*</span> <span style="color:#f1fa8c">^.+.(jpg|jpeg|gif|bmp|ico|png|css|js|swf)</span>$ {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">expires</span> <span style="color:#f1fa8c">30d</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">access_log</span> off;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#6272a4"># deny direct access
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>    <span style="color:#ff79c6">location</span> ~ <span style="color:#f1fa8c">^/(data|config|\.ht|db_structure.xml|README)</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">deny</span> <span style="color:#f1fa8c">all</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">location</span> <span style="color:#f1fa8c">/</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#6272a4"># these line replace the rewrite made in owncloud .htaccess
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>      <span style="color:#ff79c6">try_files</span> <span style="color:#8be9fd;font-style:italic">$uri</span> <span style="color:#8be9fd;font-style:italic">$uri/</span> <span style="color:#f1fa8c">@webdav</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">location</span> <span style="color:#f1fa8c">@webdav</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">include</span> <span style="color:#f1fa8c">fastcgi_params</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">fastcgi_pass</span> <span style="color:#f1fa8c">backend</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">fastcgi_param</span> <span style="color:#f1fa8c">HTTPS</span> on;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">fastcgi_split_path_info</span> <span style="color:#f1fa8c">^(.+\.php)(/.*)</span>$;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">SCRIPT_FILENAME</span>  <span style="color:#8be9fd;font-style:italic">$document_root$fastcgi_script_name</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">location</span> ~ <span style="color:#f1fa8c">\.php$</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">include</span> <span style="color:#f1fa8c">fastcgi_params</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">fastcgi_pass</span> <span style="color:#f1fa8c">backend</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">fastcgi_param</span> <span style="color:#f1fa8c">HTTPS</span> on;
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">SCRIPT_FILENAME</span>  <span style="color:#8be9fd;font-style:italic">$document_root$fastcgi_script_name</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Additionally I added these lines to the default <em>/etc/nginx/fastcgi_params</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nginx" data-lang="nginx"><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">PATH_INFO</span>          <span style="color:#8be9fd;font-style:italic">$fastcgi_path_info</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">PATH_TRANSLATED</span>    <span style="color:#8be9fd;font-style:italic">$document_root$fastcgi_path_info</span>;
</span></span></code></pre></div><p>So it does looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nginx" data-lang="nginx"><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">PATH_INFO</span>          <span style="color:#8be9fd;font-style:italic">$fastcgi_path_info</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">PATH_TRANSLATED</span>    <span style="color:#8be9fd;font-style:italic">$document_root$fastcgi_path_info</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">QUERY_STRING</span>       <span style="color:#8be9fd;font-style:italic">$query_string</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">REQUEST_METHOD</span>     <span style="color:#8be9fd;font-style:italic">$request_method</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">CONTENT_TYPE</span>       <span style="color:#8be9fd;font-style:italic">$content_type</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">CONTENT_LENGTH</span>     <span style="color:#8be9fd;font-style:italic">$content_length</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">SCRIPT_NAME</span>        <span style="color:#8be9fd;font-style:italic">$fastcgi_script_name</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">REQUEST_URI</span>        <span style="color:#8be9fd;font-style:italic">$request_uri</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">DOCUMENT_URI</span>       <span style="color:#8be9fd;font-style:italic">$document_uri</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">DOCUMENT_ROOT</span>      <span style="color:#8be9fd;font-style:italic">$document_root</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">SERVER_PROTOCOL</span>    <span style="color:#8be9fd;font-style:italic">$server_protocol</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">HTTPS</span>              <span style="color:#8be9fd;font-style:italic">$https</span> <span style="color:#f1fa8c">if_not_empty</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">GATEWAY_INTERFACE</span>  <span style="color:#f1fa8c">CGI/1.1</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">SERVER_SOFTWARE</span>    <span style="color:#f1fa8c">nginx/</span><span style="color:#8be9fd;font-style:italic">$nginx_version</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">REMOTE_ADDR</span>        <span style="color:#8be9fd;font-style:italic">$remote_addr</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">REMOTE_PORT</span>        <span style="color:#8be9fd;font-style:italic">$remote_port</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">SERVER_ADDR</span>        <span style="color:#8be9fd;font-style:italic">$server_addr</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">SERVER_PORT</span>        <span style="color:#8be9fd;font-style:italic">$server_port</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">SERVER_NAME</span>        <span style="color:#8be9fd;font-style:italic">$server_name</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4"># PHP only, required if PHP was built with --enable-force-cgi-redirect
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">fastcgi_param</span>  <span style="color:#f1fa8c">REDIRECT_STATUS</span>    <span style="color:#bd93f9">200</span>;
</span></span></code></pre></div><p>PHP +++ If your upload size is still lower than the one set in nginx&rsquo;s
configuration, increase the size in the php.ini as described
<a href="http://www.radinks.com/upload/config.php" target="_blank">here</a></p>
<h2 id="references">References</h2>
<p><a href="http://nblock.org/2012/03/12/nginx-and-owncloud" target="_blank">Setting up Nginx and Owncloud - nblock.org</a></p>
]]></content><category scheme="https://blog.thalheim.io/categories/nginx" term="nginx" label="nginx"/><category scheme="https://blog.thalheim.io/categories/owncloud" term="owncloud" label="owncloud"/></entry></feed>